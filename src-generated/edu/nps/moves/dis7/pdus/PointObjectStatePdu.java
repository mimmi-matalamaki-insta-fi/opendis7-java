/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;
import java.nio.ByteBuffer;

/**
 * 7.10.4 Used to communicate detailed information about the addition/modification of a synthetic environment object that is geometrically anchored to the terrain with a single point.
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public class PointObjectStatePdu extends SyntheticEnvironmentFamilyPdu implements Serializable
{
   /** Object in synthetic environment */
   protected EntityID  objectID = new EntityID(); 

   /** Object with which this point object is associated */
   protected ObjectIdentifier  referencedObjectID = new ObjectIdentifier(); 

   /** unique update number of each state transition of an object */
   protected int updateNumber;

   /** force ID provides a unique identifier uid 6 */
   protected ForceID forceID = ForceID.values()[0];

   /** modifications uid 240 */
   protected ObjectStateModificationPointObject modifications = new ObjectStateModificationPointObject();

   /** Object type */
   protected ObjectType  objectType = new ObjectType(); 

   /** Object location */
   protected Vector3Double  objectLocation = new Vector3Double(); 

   /** Object orientation */
   protected EulerAngles  objectOrientation = new EulerAngles(); 

   /** Specific object apperance */
   protected int specificObjectAppearance;

   /** General object apperance uid 229 */
   protected ObjectStateAppearanceGeneral generObjectAppearance = new ObjectStateAppearanceGeneral();

   /** padding1 is an undescribed parameter... */
   protected short padding1;

   /** requesterID */
   protected SimulationAddress  requesterID = new SimulationAddress(); 

   /** receiver ID provides a unique identifier */
   protected SimulationAddress  receivingID = new SimulationAddress(); 

   /** padding */
   protected int pad2;


/** Constructor creates and configures a new instance object */
 public PointObjectStatePdu()
 {
    setPduType( DisPduType.POINT_OBJECT_STATE );
 }
/** copy method creates a deep copy of current object using preferred marshalling method
 * @return deep copy of PDU */
 public PointObjectStatePdu copy()
 {
     return copyDataOutputStream();
 }
/** Creates a "deep copy" of current object using ByteBuffer methods.
 * @return deep copy of PDU */
 public PointObjectStatePdu copyByteBuffer()
 {
     PointObjectStatePdu newCopy = new PointObjectStatePdu();
     ByteBuffer byteBuffer = ByteBuffer.allocate(400);
     try
     {
         this.marshal(byteBuffer);      // working
         newCopy.unmarshal(byteBuffer); // not working
     }
     catch (Exception e)
     {
         System.out.println("PointObjectStatePdu deep copy() marshall/unmarshall ByteBuffer exception " + e.getMessage());
         e.printStackTrace();
         System.exit(-1);
     }
     return newCopy;
 }

/** byteArrayOutputStream (baos) is used for marshal/unmarshal serialization
   * @see copyDataOutputStream() */
protected ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
/** dataOutputStream (dos) is used for marshal/unmarshal serialization
   * @see copyDataOutputStream() */
protected DataOutputStream      dataOutputStream      = new DataOutputStream(byteArrayOutputStream);

/** copy method creates a deep copy of current object using DataOutputStream methods.
 * @return deep copy of PDU */
 public PointObjectStatePdu copyDataOutputStream()
 {
     PointObjectStatePdu newCopy = new PointObjectStatePdu();
     try
     {
         this.marshal(dataOutputStream);
         byte[] byteArrayDOS = byteArrayOutputStream.toByteArray();
         newCopy.unmarshal(ByteBuffer.wrap(byteArrayDOS));
     }
     catch (Exception e)
     {
         System.out.println("PointObjectStatePdu deep copy() marshall/unmarshall DataOutputStream exception " + e.getMessage());
         e.printStackTrace();
         System.exit(-1);
     }
        try
        {
                 dataOutputStream.flush();
            byteArrayOutputStream.flush();
            byteArrayOutputStream.reset();
        }
        catch (IOException ioe)
        {
            System.out.println("PointObjectStatePdu copyDataOutputStream() flush IOException: " + ioe.getMessage());
        }
     return newCopy;
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize = super.getMarshalledSize();
   if (objectID != null)
       marshalSize += objectID.getMarshalledSize();
   if (referencedObjectID != null)
       marshalSize += referencedObjectID.getMarshalledSize();
   marshalSize += 4;  // updateNumber
   if (forceID != null)
       marshalSize += forceID.getMarshalledSize();
   if (modifications != null)
       marshalSize += modifications.getMarshalledSize();
   if (objectType != null)
       marshalSize += objectType.getMarshalledSize();
   if (objectLocation != null)
       marshalSize += objectLocation.getMarshalledSize();
   if (objectOrientation != null)
       marshalSize += objectOrientation.getMarshalledSize();
   marshalSize += 4;  // specificObjectAppearance
   if (generObjectAppearance != null)
       marshalSize += generObjectAppearance.getMarshalledSize();
   marshalSize += 2;  // padding1
   if (requesterID != null)
       marshalSize += requesterID.getMarshalledSize();
   if (receivingID != null)
       marshalSize += receivingID.getMarshalledSize();
   marshalSize += 4;  // pad2

   return marshalSize;
}


/** Setter for {@link PointObjectStatePdu#objectID}
  * @param pObjectID new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setObjectID(EntityID pObjectID)
{
    objectID = pObjectID;
    return this;
}
/** Getter for {@link PointObjectStatePdu#objectID}
  * @return value of interest */
public EntityID getObjectID()
{
    return objectID;
}


/** Setter for {@link PointObjectStatePdu#referencedObjectID}
  * @param pReferencedObjectID new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setReferencedObjectID(ObjectIdentifier pReferencedObjectID)
{
    referencedObjectID = pReferencedObjectID;
    return this;
}
/** Getter for {@link PointObjectStatePdu#referencedObjectID}
  * @return value of interest */
public ObjectIdentifier getReferencedObjectID()
{
    return referencedObjectID;
}


/** Setter for {@link PointObjectStatePdu#updateNumber}
  * @param pUpdateNumber new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setUpdateNumber(int pUpdateNumber)
{
    updateNumber = pUpdateNumber;
    return this;
}
/** Getter for {@link PointObjectStatePdu#updateNumber}
  * @return value of interest */
public int getUpdateNumber()
{
    return updateNumber; 
}

/** Setter for {@link PointObjectStatePdu#forceID}
  * @param pForceID new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setForceID(ForceID pForceID)
{
    forceID = pForceID;
    return this;
}
/** Getter for {@link PointObjectStatePdu#forceID}
  * @return value of interest */
public ForceID getForceID()
{
    return forceID; 
}

/** Setter for {@link PointObjectStatePdu#modifications}
  * @param pModifications new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setModifications(ObjectStateModificationPointObject pModifications)
{
    modifications = pModifications;
    return this;
}
/** Getter for {@link PointObjectStatePdu#modifications}
  * @return value of interest */
public ObjectStateModificationPointObject getModifications()
{
    return modifications; 
}

/** Setter for {@link PointObjectStatePdu#objectType}
  * @param pObjectType new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setObjectType(ObjectType pObjectType)
{
    objectType = pObjectType;
    return this;
}
/** Getter for {@link PointObjectStatePdu#objectType}
  * @return value of interest */
public ObjectType getObjectType()
{
    return objectType;
}


/** Setter for {@link PointObjectStatePdu#objectLocation}
  * @param pObjectLocation new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setObjectLocation(Vector3Double pObjectLocation)
{
    objectLocation = pObjectLocation;
    return this;
}
/** Getter for {@link PointObjectStatePdu#objectLocation}
  * @return value of interest */
public Vector3Double getObjectLocation()
{
    return objectLocation;
}


/** Setter for {@link PointObjectStatePdu#objectOrientation}
  * @param pObjectOrientation new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setObjectOrientation(EulerAngles pObjectOrientation)
{
    objectOrientation = pObjectOrientation;
    return this;
}
/** Getter for {@link PointObjectStatePdu#objectOrientation}
  * @return value of interest */
public EulerAngles getObjectOrientation()
{
    return objectOrientation;
}


/** Setter for {@link PointObjectStatePdu#specificObjectAppearance}
  * @param pSpecificObjectAppearance new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setSpecificObjectAppearance(int pSpecificObjectAppearance)
{
    specificObjectAppearance = pSpecificObjectAppearance;
    return this;
}
/** Getter for {@link PointObjectStatePdu#specificObjectAppearance}
  * @return value of interest */
public int getSpecificObjectAppearance()
{
    return specificObjectAppearance; 
}

/** Setter for {@link PointObjectStatePdu#generObjectAppearance}
  * @param pGenerObjectAppearance new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setGenerObjectAppearance(ObjectStateAppearanceGeneral pGenerObjectAppearance)
{
    generObjectAppearance = pGenerObjectAppearance;
    return this;
}
/** Getter for {@link PointObjectStatePdu#generObjectAppearance}
  * @return value of interest */
public ObjectStateAppearanceGeneral getGenerObjectAppearance()
{
    return generObjectAppearance; 
}

/** Setter for {@link PointObjectStatePdu#padding1}
  * @param pPadding1 new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setPadding1(short pPadding1)
{
    padding1 = pPadding1;
    return this;
}
/** Utility setter for {@link PointObjectStatePdu#padding1}
  * @param pPadding1 new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setPadding1(int pPadding1){
    padding1 = (short) pPadding1;
    return this;
}
/** Getter for {@link PointObjectStatePdu#padding1}
  * @return value of interest */
public short getPadding1()
{
    return padding1; 
}

/** Setter for {@link PointObjectStatePdu#requesterID}
  * @param pRequesterID new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setRequesterID(SimulationAddress pRequesterID)
{
    requesterID = pRequesterID;
    return this;
}
/** Getter for {@link PointObjectStatePdu#requesterID}
  * @return value of interest */
public SimulationAddress getRequesterID()
{
    return requesterID;
}


/** Setter for {@link PointObjectStatePdu#receivingID}
  * @param pReceivingID new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setReceivingID(SimulationAddress pReceivingID)
{
    receivingID = pReceivingID;
    return this;
}
/** Getter for {@link PointObjectStatePdu#receivingID}
  * @return value of interest */
public SimulationAddress getReceivingID()
{
    return receivingID;
}


/** Setter for {@link PointObjectStatePdu#pad2}
  * @param pPad2 new value of interest
  * @return same object to permit progressive setters */
public PointObjectStatePdu setPad2(int pPad2)
{
    pad2 = pPad2;
    return this;
}
/** Getter for {@link PointObjectStatePdu#pad2}
  * @return value of interest */
public int getPad2()
{
    return pad2; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    super.marshal(dos);
    try 
    {
       objectID.marshal(dos);
       referencedObjectID.marshal(dos);
       dos.writeInt(updateNumber);
       forceID.marshal(dos);
       modifications.marshal(dos);
       objectType.marshal(dos);
       objectLocation.marshal(dos);
       objectOrientation.marshal(dos);
       dos.writeInt(specificObjectAppearance);
       generObjectAppearance.marshal(dos);
       dos.writeShort(padding1);
       requesterID.marshal(dos);
       receivingID.marshal(dos);
       dos.writeInt(pad2);
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    uPosition += super.unmarshal(dis);

    try 
    {
        uPosition += objectID.unmarshal(dis);
        uPosition += referencedObjectID.unmarshal(dis);
        updateNumber = dis.readInt();
        uPosition += 4;
        forceID = ForceID.unmarshalEnum(dis);
        uPosition += forceID.getMarshalledSize();
        uPosition += modifications.unmarshal(dis);
        uPosition += objectType.unmarshal(dis);
        uPosition += objectLocation.unmarshal(dis);
        uPosition += objectOrientation.unmarshal(dis);
        specificObjectAppearance = dis.readInt();
        uPosition += 4;
        uPosition += generObjectAppearance.unmarshal(dis);
        padding1 = (short)dis.readUnsignedShort();
        uPosition += 2;
        uPosition += requesterID.unmarshal(dis);
        uPosition += receivingID.unmarshal(dis);
        pad2 = dis.readInt();
        uPosition += 4;
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   super.marshal(byteBuffer);
   objectID.marshal(byteBuffer);
   referencedObjectID.marshal(byteBuffer);
   byteBuffer.putInt( (int)updateNumber);
   forceID.marshal(byteBuffer);
   modifications.marshal(byteBuffer);
   objectType.marshal(byteBuffer);
   objectLocation.marshal(byteBuffer);
   objectOrientation.marshal(byteBuffer);
   byteBuffer.putInt( (int)specificObjectAppearance);
   generObjectAppearance.marshal(byteBuffer);
   byteBuffer.putShort( (short)padding1);
   requesterID.marshal(byteBuffer);
   receivingID.marshal(byteBuffer);
   byteBuffer.putInt( (int)pad2);
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    super.unmarshal(byteBuffer);

    try
    {
        // attribute objectID marked as not serialized
        objectID.unmarshal(byteBuffer);
        // attribute referencedObjectID marked as not serialized
        referencedObjectID.unmarshal(byteBuffer);
        // attribute updateNumber marked as not serialized
        updateNumber = byteBuffer.getInt();
        // attribute forceID marked as not serialized
        forceID = ForceID.unmarshalEnum(byteBuffer);
        // attribute modifications marked as not serialized
        modifications.unmarshal(byteBuffer);
        // attribute objectType marked as not serialized
        objectType.unmarshal(byteBuffer);
        // attribute objectLocation marked as not serialized
        objectLocation.unmarshal(byteBuffer);
        // attribute objectOrientation marked as not serialized
        objectOrientation.unmarshal(byteBuffer);
        // attribute specificObjectAppearance marked as not serialized
        specificObjectAppearance = byteBuffer.getInt();
        // attribute generObjectAppearance marked as not serialized
        generObjectAppearance.unmarshal(byteBuffer);
        // attribute padding1 marked as not serialized
        padding1 = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute requesterID marked as not serialized
        requesterID.unmarshal(byteBuffer);
        // attribute receivingID marked as not serialized
        receivingID.unmarshal(byteBuffer);
        // attribute pad2 marked as not serialized
        pad2 = byteBuffer.getInt();
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

@Override
 public boolean equalsImpl(Object obj)
 {
     final PointObjectStatePdu rhs = (PointObjectStatePdu)obj;

     if( ! Objects.equals(objectID, rhs.objectID) ) return false;
     if( ! Objects.equals(referencedObjectID, rhs.referencedObjectID) ) return false;
     if( ! (updateNumber == rhs.updateNumber)) return false;
     if( ! (forceID == rhs.forceID)) return false;
     if( ! Objects.equals(modifications, rhs.modifications) ) return false;
     if( ! Objects.equals(objectType, rhs.objectType) ) return false;
     if( ! Objects.equals(objectLocation, rhs.objectLocation) ) return false;
     if( ! Objects.equals(objectOrientation, rhs.objectOrientation) ) return false;
     if( ! (specificObjectAppearance == rhs.specificObjectAppearance)) return false;
     if( ! Objects.equals(generObjectAppearance, rhs.generObjectAppearance) ) return false;
     if( ! (padding1 == rhs.padding1)) return false;
     if( ! Objects.equals(requesterID, rhs.requesterID) ) return false;
     if( ! Objects.equals(receivingID, rhs.receivingID) ) return false;
     if( ! (pad2 == rhs.pad2)) return false;
    return super.equalsImpl(rhs);
 }

 @Override
 public String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" objectID:").append(objectID); // writeOneToString
    sb.append(" referencedObjectID:").append(referencedObjectID); // writeOneToString
    sb.append(" updateNumber:").append(updateNumber); // writeOneToString
    sb.append(" forceID:").append(forceID); // writeOneToString
    sb.append(" modifications:").append(modifications); // writeOneToString
    sb.append(" objectType:").append(objectType); // writeOneToString
    sb.append(" objectLocation:").append(objectLocation); // writeOneToString
    sb.append(" objectOrientation:").append(objectOrientation); // writeOneToString
    sb.append(" specificObjectAppearance:").append(specificObjectAppearance); // writeOneToString
    sb.append(" generObjectAppearance:").append(generObjectAppearance); // writeOneToString
    sb.append(" padding1:").append(padding1); // writeOneToString
    sb.append(" requesterID:").append(requesterID); // writeOneToString
    sb.append(" receivingID:").append(receivingID); // writeOneToString
    sb.append(" pad2:").append(pad2); // writeOneToString

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.objectID,
	                     this.referencedObjectID,
	                     this.updateNumber,
	                     this.forceID,
	                     this.modifications,
	                     this.objectType,
	                     this.objectLocation,
	                     this.objectOrientation,
	                     this.specificObjectAppearance,
	                     this.generObjectAppearance,
	                     this.padding1,
	                     this.requesterID,
	                     this.receivingID,
	                     this.pad2);
 }
} // end of class
