/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;

/**
 * identify which of the optional data fields are contained in the Minefield Data PDU or requested in the Minefield Query PDU. This is a 32-bit record. For each field, true denotes that the data is requested or present and false denotes that the data is neither requested nor present. Section 6.2.16
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public class DataFilterRecord extends Object implements Serializable
{
   /** Bitflags field */
   protected int bitFlags;

   /** Default static instance variable */
   public static int  GROUND_BURIAL_DEPTH_OFFSET_BIT = 0;
   /** Default static instance variable */
   public static int  WATER_BURIAL_DEPTH_OFFSET_BIT = 1;
   /** Default static instance variable */
   public static int  SNOW_BURIAL_DEPTH_OFFSET_BIT = 2;
   /** Default static instance variable */
   public static int  MINE_ORIENTATION_BIT = 3;
   /** Default static instance variable */
   public static int  THERMAL_CONSTRAST_BIT = 4;
   /** Default static instance variable */
   public static int  REFLECTANCE_BIT = 5;
   /** Default static instance variable */
   public static int  MINE_EMPLACEMENT_TIME_BIT = 6;
   /** Default static instance variable */
   public static int  TRIP_DETONATION_WIRE_BIT = 7;
   /** Default static instance variable */
   public static int  FUSING_BIT = 8;
   /** Default static instance variable */
   public static int  SCALAR_DETECTION_COEFFICIENT_BIT = 9;
   /** Default static instance variable */
   public static int  PAINT_SCHEME_BIT = 10;

/** Constructor creates and configures a new instance object */
 public DataFilterRecord()
 {
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize += 4;  // bitFlags

   return marshalSize;
}


/** Setter for {@link DataFilterRecord#bitFlags}
  * @param pBitFlags new value of interest
  * @return same object to permit progressive setters */
public DataFilterRecord setBitFlags(int pBitFlags)
{
    bitFlags = pBitFlags;
    return this;
}
/** Getter for {@link DataFilterRecord#bitFlags}
  * @return value of interest */
public int getBitFlags()
{
    return bitFlags; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    try 
    {
       dos.writeInt(bitFlags);
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    try 
    {
        bitFlags = dis.readInt();
        uPosition += 4;
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   byteBuffer.putInt( (int)bitFlags);
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    try
    {
        // attribute bitFlags marked as not serialized
        bitFlags = byteBuffer.getInt();
        // attribute GROUND_BURIAL_DEPTH_OFFSET_BIT marked as not serialized
        // attribute WATER_BURIAL_DEPTH_OFFSET_BIT marked as not serialized
        // attribute SNOW_BURIAL_DEPTH_OFFSET_BIT marked as not serialized
        // attribute MINE_ORIENTATION_BIT marked as not serialized
        // attribute THERMAL_CONSTRAST_BIT marked as not serialized
        // attribute REFLECTANCE_BIT marked as not serialized
        // attribute MINE_EMPLACEMENT_TIME_BIT marked as not serialized
        // attribute TRIP_DETONATION_WIRE_BIT marked as not serialized
        // attribute FUSING_BIT marked as not serialized
        // attribute SCALAR_DETECTION_COEFFICIENT_BIT marked as not serialized
        // attribute PAINT_SCHEME_BIT marked as not serialized
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

 /**
  * Compare all fields that contribute to the state, ignoring
  * transient and static fields, for <code>this</code> and the supplied object
  * @param obj the object to compare to
  * @return true if the objects are equal, false otherwise.
  */
 public boolean equalsImpl(Object obj)
 {
     final DataFilterRecord rhs = (DataFilterRecord)obj;

     if( ! (bitFlags == rhs.bitFlags)) return false;
    return true;
 }

 @Override
 public String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" bitFlags:").append(bitFlags); // writeOneToString
    sb.append(" GROUND_BURIAL_DEPTH_OFFSET_BIT:").append(GROUND_BURIAL_DEPTH_OFFSET_BIT); // writeOneToString
    sb.append(" WATER_BURIAL_DEPTH_OFFSET_BIT:").append(WATER_BURIAL_DEPTH_OFFSET_BIT); // writeOneToString
    sb.append(" SNOW_BURIAL_DEPTH_OFFSET_BIT:").append(SNOW_BURIAL_DEPTH_OFFSET_BIT); // writeOneToString
    sb.append(" MINE_ORIENTATION_BIT:").append(MINE_ORIENTATION_BIT); // writeOneToString
    sb.append(" THERMAL_CONSTRAST_BIT:").append(THERMAL_CONSTRAST_BIT); // writeOneToString
    sb.append(" REFLECTANCE_BIT:").append(REFLECTANCE_BIT); // writeOneToString
    sb.append(" MINE_EMPLACEMENT_TIME_BIT:").append(MINE_EMPLACEMENT_TIME_BIT); // writeOneToString
    sb.append(" TRIP_DETONATION_WIRE_BIT:").append(TRIP_DETONATION_WIRE_BIT); // writeOneToString
    sb.append(" FUSING_BIT:").append(FUSING_BIT); // writeOneToString
    sb.append(" SCALAR_DETECTION_COEFFICIENT_BIT:").append(SCALAR_DETECTION_COEFFICIENT_BIT); // writeOneToString
    sb.append(" PAINT_SCHEME_BIT:").append(PAINT_SCHEME_BIT); // writeOneToString

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.bitFlags,
	                     this.GROUND_BURIAL_DEPTH_OFFSET_BIT,
	                     this.WATER_BURIAL_DEPTH_OFFSET_BIT,
	                     this.SNOW_BURIAL_DEPTH_OFFSET_BIT,
	                     this.MINE_ORIENTATION_BIT,
	                     this.THERMAL_CONSTRAST_BIT,
	                     this.REFLECTANCE_BIT,
	                     this.MINE_EMPLACEMENT_TIME_BIT,
	                     this.TRIP_DETONATION_WIRE_BIT,
	                     this.FUSING_BIT,
	                     this.SCALAR_DETECTION_COEFFICIENT_BIT,
	                     this.PAINT_SCHEME_BIT);
 }
} // end of class
