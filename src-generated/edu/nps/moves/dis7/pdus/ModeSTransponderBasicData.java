/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;

/**
 * B.2.41. Mode S transponder basic data
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public class ModeSTransponderBasicData extends Object implements Serializable
{
   /** Mode S transponder status, part of Mode S transponder basic data fields. See B.2.42. */
   protected short modeSTransponderStatus;

   /** Mode S levels present, part of Mode S transponder basic data fields. See B.2.40. */
   protected byte modeSLevelsPresent;

   /** aircraft present domain uid 356 */
   protected AircraftPresentDomain aircraftPresentDomain = AircraftPresentDomain.values()[0];

   /** Aircraft identification, part of Mode S transponder basic data fields. See B.2.35. */
   protected long aircraftIdentification;

   /** Unique ICAO Mode S aircraft address, part of Mode S transponder basic data fields. */
   protected int aircraftAddress;

   /** Aircraft identification type, part of Mode S transponder basic data fields. uid 357 */
   protected AircraftIdentificationType aircraftIdentificationType = AircraftIdentificationType.values()[0];

   /** DAP source, part of Mode S transponder basic data fields. See B.2.6. */
   protected byte dapSource;

   /** Mode S altitude, part of Mode S transponder basic data fields. See B.2.36. */
   protected short modeSAltitude;

   /** Capability report, part of Mode S transponder basic data fields. uid 358 */
   protected CapabilityReport capabilityReport = CapabilityReport.values()[0];

   /** Padding */
   protected byte padding;

   /** Padding */
   protected short padding2;


/** Constructor creates and configures a new instance object */
 public ModeSTransponderBasicData()
 {
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize += 2;  // modeSTransponderStatus
   marshalSize += 1;  // modeSLevelsPresent
   if (aircraftPresentDomain != null)
       marshalSize += aircraftPresentDomain.getMarshalledSize();
   marshalSize += 8;  // aircraftIdentification
   marshalSize += 4;  // aircraftAddress
   if (aircraftIdentificationType != null)
       marshalSize += aircraftIdentificationType.getMarshalledSize();
   marshalSize += 1;  // dapSource
   marshalSize += 2;  // modeSAltitude
   if (capabilityReport != null)
       marshalSize += capabilityReport.getMarshalledSize();
   marshalSize += 1;  // padding
   marshalSize += 2;  // padding2

   return marshalSize;
}


/** Setter for {@link ModeSTransponderBasicData#modeSTransponderStatus}
  * @param pModeSTransponderStatus new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setModeSTransponderStatus(short pModeSTransponderStatus)
{
    modeSTransponderStatus = pModeSTransponderStatus;
    return this;
}
/** Utility setter for {@link ModeSTransponderBasicData#modeSTransponderStatus}
  * @param pModeSTransponderStatus new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setModeSTransponderStatus(int pModeSTransponderStatus){
    modeSTransponderStatus = (short) pModeSTransponderStatus;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#modeSTransponderStatus}
  * @return value of interest */
public short getModeSTransponderStatus()
{
    return modeSTransponderStatus; 
}

/** Setter for {@link ModeSTransponderBasicData#modeSLevelsPresent}
  * @param pModeSLevelsPresent new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setModeSLevelsPresent(byte pModeSLevelsPresent)
{
    modeSLevelsPresent = pModeSLevelsPresent;
    return this;
}
/** Utility setter for {@link ModeSTransponderBasicData#modeSLevelsPresent}
  * @param pModeSLevelsPresent new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setModeSLevelsPresent(int pModeSLevelsPresent){
    modeSLevelsPresent = (byte) pModeSLevelsPresent;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#modeSLevelsPresent}
  * @return value of interest */
public byte getModeSLevelsPresent()
{
    return modeSLevelsPresent; 
}

/** Setter for {@link ModeSTransponderBasicData#aircraftPresentDomain}
  * @param pAircraftPresentDomain new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setAircraftPresentDomain(AircraftPresentDomain pAircraftPresentDomain)
{
    aircraftPresentDomain = pAircraftPresentDomain;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#aircraftPresentDomain}
  * @return value of interest */
public AircraftPresentDomain getAircraftPresentDomain()
{
    return aircraftPresentDomain; 
}

/** Setter for {@link ModeSTransponderBasicData#aircraftIdentification}
  * @param pAircraftIdentification new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setAircraftIdentification(long pAircraftIdentification)
{
    aircraftIdentification = pAircraftIdentification;
    return this;
}
/** Utility setter for {@link ModeSTransponderBasicData#aircraftIdentification}
  * @param pAircraftIdentification new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setAircraftIdentification(int pAircraftIdentification){
    aircraftIdentification = (long) pAircraftIdentification;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#aircraftIdentification}
  * @return value of interest */
public long getAircraftIdentification()
{
    return aircraftIdentification; 
}

/** Setter for {@link ModeSTransponderBasicData#aircraftAddress}
  * @param pAircraftAddress new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setAircraftAddress(int pAircraftAddress)
{
    aircraftAddress = pAircraftAddress;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#aircraftAddress}
  * @return value of interest */
public int getAircraftAddress()
{
    return aircraftAddress; 
}

/** Setter for {@link ModeSTransponderBasicData#aircraftIdentificationType}
  * @param pAircraftIdentificationType new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setAircraftIdentificationType(AircraftIdentificationType pAircraftIdentificationType)
{
    aircraftIdentificationType = pAircraftIdentificationType;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#aircraftIdentificationType}
  * @return value of interest */
public AircraftIdentificationType getAircraftIdentificationType()
{
    return aircraftIdentificationType; 
}

/** Setter for {@link ModeSTransponderBasicData#dapSource}
  * @param pDapSource new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setDapSource(byte pDapSource)
{
    dapSource = pDapSource;
    return this;
}
/** Utility setter for {@link ModeSTransponderBasicData#dapSource}
  * @param pDapSource new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setDapSource(int pDapSource){
    dapSource = (byte) pDapSource;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#dapSource}
  * @return value of interest */
public byte getDapSource()
{
    return dapSource; 
}

/** Setter for {@link ModeSTransponderBasicData#modeSAltitude}
  * @param pModeSAltitude new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setModeSAltitude(short pModeSAltitude)
{
    modeSAltitude = pModeSAltitude;
    return this;
}
/** Utility setter for {@link ModeSTransponderBasicData#modeSAltitude}
  * @param pModeSAltitude new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setModeSAltitude(int pModeSAltitude){
    modeSAltitude = (short) pModeSAltitude;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#modeSAltitude}
  * @return value of interest */
public short getModeSAltitude()
{
    return modeSAltitude; 
}

/** Setter for {@link ModeSTransponderBasicData#capabilityReport}
  * @param pCapabilityReport new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setCapabilityReport(CapabilityReport pCapabilityReport)
{
    capabilityReport = pCapabilityReport;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#capabilityReport}
  * @return value of interest */
public CapabilityReport getCapabilityReport()
{
    return capabilityReport; 
}

/** Setter for {@link ModeSTransponderBasicData#padding}
  * @param pPadding new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setPadding(byte pPadding)
{
    padding = pPadding;
    return this;
}
/** Utility setter for {@link ModeSTransponderBasicData#padding}
  * @param pPadding new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setPadding(int pPadding){
    padding = (byte) pPadding;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#padding}
  * @return value of interest */
public byte getPadding()
{
    return padding; 
}

/** Setter for {@link ModeSTransponderBasicData#padding2}
  * @param pPadding2 new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setPadding2(short pPadding2)
{
    padding2 = pPadding2;
    return this;
}
/** Utility setter for {@link ModeSTransponderBasicData#padding2}
  * @param pPadding2 new value of interest
  * @return same object to permit progressive setters */
public ModeSTransponderBasicData setPadding2(int pPadding2){
    padding2 = (short) pPadding2;
    return this;
}
/** Getter for {@link ModeSTransponderBasicData#padding2}
  * @return value of interest */
public short getPadding2()
{
    return padding2; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    try 
    {
       dos.writeShort(modeSTransponderStatus);
       dos.writeByte(modeSLevelsPresent);
       aircraftPresentDomain.marshal(dos);
       dos.writeLong(aircraftIdentification);
       dos.writeInt(aircraftAddress);
       aircraftIdentificationType.marshal(dos);
       dos.writeByte(dapSource);
       dos.writeShort(modeSAltitude);
       capabilityReport.marshal(dos);
       dos.writeByte(padding);
       dos.writeShort(padding2);
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    try 
    {
        modeSTransponderStatus = (short)dis.readUnsignedShort();
        uPosition += 2;
        modeSLevelsPresent = (byte)dis.readUnsignedByte();
        uPosition += 1;
        aircraftPresentDomain = AircraftPresentDomain.unmarshalEnum(dis);
        uPosition += aircraftPresentDomain.getMarshalledSize();
        aircraftIdentification = dis.readLong();
        uPosition += 4;
        aircraftAddress = dis.readInt();
        uPosition += 4;
        aircraftIdentificationType = AircraftIdentificationType.unmarshalEnum(dis);
        uPosition += aircraftIdentificationType.getMarshalledSize();
        dapSource = (byte)dis.readUnsignedByte();
        uPosition += 1;
        modeSAltitude = (short)dis.readUnsignedShort();
        uPosition += 2;
        capabilityReport = CapabilityReport.unmarshalEnum(dis);
        uPosition += capabilityReport.getMarshalledSize();
        padding = (byte)dis.readUnsignedByte();
        uPosition += 1;
        padding2 = (short)dis.readUnsignedShort();
        uPosition += 2;
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   byteBuffer.putShort( (short)modeSTransponderStatus);
   byteBuffer.put( (byte)modeSLevelsPresent);
   aircraftPresentDomain.marshal(byteBuffer);
   byteBuffer.putLong( (long)aircraftIdentification);
   byteBuffer.putInt( (int)aircraftAddress);
   aircraftIdentificationType.marshal(byteBuffer);
   byteBuffer.put( (byte)dapSource);
   byteBuffer.putShort( (short)modeSAltitude);
   capabilityReport.marshal(byteBuffer);
   byteBuffer.put( (byte)padding);
   byteBuffer.putShort( (short)padding2);
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    try
    {
        // attribute modeSTransponderStatus marked as not serialized
        modeSTransponderStatus = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute modeSLevelsPresent marked as not serialized
        modeSLevelsPresent = (byte)(byteBuffer.get() & 0xFF);
        // attribute aircraftPresentDomain marked as not serialized
        aircraftPresentDomain = AircraftPresentDomain.unmarshalEnum(byteBuffer);
        // attribute aircraftIdentification marked as not serialized
        aircraftIdentification = byteBuffer.getLong();
        // attribute aircraftAddress marked as not serialized
        aircraftAddress = byteBuffer.getInt();
        // attribute aircraftIdentificationType marked as not serialized
        aircraftIdentificationType = AircraftIdentificationType.unmarshalEnum(byteBuffer);
        // attribute dapSource marked as not serialized
        dapSource = (byte)(byteBuffer.get() & 0xFF);
        // attribute modeSAltitude marked as not serialized
        modeSAltitude = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute capabilityReport marked as not serialized
        capabilityReport = CapabilityReport.unmarshalEnum(byteBuffer);
        // attribute padding marked as not serialized
        padding = (byte)(byteBuffer.get() & 0xFF);
        // attribute padding2 marked as not serialized
        padding2 = (short)(byteBuffer.getShort() & 0xFFFF);
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

 /**
  * Compare all fields that contribute to the state, ignoring
  * transient and static fields, for <code>this</code> and the supplied object
  * @param obj the object to compare to
  * @return true if the objects are equal, false otherwise.
  */
 public boolean equalsImpl(Object obj)
 {
     boolean ivarsEqual = true;

     final ModeSTransponderBasicData rhs = (ModeSTransponderBasicData)obj;

     if( ! (modeSTransponderStatus == rhs.modeSTransponderStatus)) ivarsEqual = false;
     if( ! (modeSLevelsPresent == rhs.modeSLevelsPresent)) ivarsEqual = false;
     if( ! (aircraftPresentDomain == rhs.aircraftPresentDomain)) ivarsEqual = false;
     if( ! (aircraftIdentification == rhs.aircraftIdentification)) ivarsEqual = false;
     if( ! (aircraftAddress == rhs.aircraftAddress)) ivarsEqual = false;
     if( ! (aircraftIdentificationType == rhs.aircraftIdentificationType)) ivarsEqual = false;
     if( ! (dapSource == rhs.dapSource)) ivarsEqual = false;
     if( ! (modeSAltitude == rhs.modeSAltitude)) ivarsEqual = false;
     if( ! (capabilityReport == rhs.capabilityReport)) ivarsEqual = false;
     if( ! (padding == rhs.padding)) ivarsEqual = false;
     if( ! (padding2 == rhs.padding2)) ivarsEqual = false;
    return ivarsEqual;
 }

 @Override
 public String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" modeSTransponderStatus:").append(modeSTransponderStatus); // writeOneToString
    sb.append(" modeSLevelsPresent:").append(modeSLevelsPresent); // writeOneToString
    sb.append(" aircraftPresentDomain:").append(aircraftPresentDomain); // writeOneToString
    sb.append(" aircraftIdentification:").append(aircraftIdentification); // writeOneToString
    sb.append(" aircraftAddress:").append(aircraftAddress); // writeOneToString
    sb.append(" aircraftIdentificationType:").append(aircraftIdentificationType); // writeOneToString
    sb.append(" dapSource:").append(dapSource); // writeOneToString
    sb.append(" modeSAltitude:").append(modeSAltitude); // writeOneToString
    sb.append(" capabilityReport:").append(capabilityReport); // writeOneToString
    sb.append(" padding:").append(padding); // writeOneToString
    sb.append(" padding2:").append(padding2); // writeOneToString

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.modeSTransponderStatus,
	                     this.modeSLevelsPresent,
	                     this.aircraftPresentDomain,
	                     this.aircraftIdentification,
	                     this.aircraftAddress,
	                     this.aircraftIdentificationType,
	                     this.dapSource,
	                     this.modeSAltitude,
	                     this.capabilityReport,
	                     this.padding,
	                     this.padding2);
 }
} // end of class
