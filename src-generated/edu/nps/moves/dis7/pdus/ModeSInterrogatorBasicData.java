/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;

/**
 * B.2.37. Mode S interrogator basic data
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public class ModeSInterrogatorBasicData extends Object implements Serializable
{
   /** Mode S interrogator status, part of Mode S interrogator basic data fields. See B.2.39. */
   protected byte modeSInterrogatorStatus;

   /** Padding, part of Mode S interrogator basic data fields */
   protected byte padding;

   /** Mode S levels present, part of Mode S interrogator basic data fields. See B.2.40 */
   protected byte modeSLevelsPresent;

   /** Padding, part of Mode S interrogator basic data fields */
   protected byte padding2;

   /** Padding, part of Mode S interrogator basic data fields */
   protected int padding3;

   /** Padding, part of Mode S interrogator basic data fields */
   protected int padding4;

   /** Padding, part of Mode S interrogator basic data fields */
   protected int padding5;

   /** Padding, part of Mode S interrogator basic data fields */
   protected int padding6;

   /** Padding, part of Mode S interrogator basic data fields */
   protected int padding7;


/** Constructor creates and configures a new instance object */
 public ModeSInterrogatorBasicData()
 {
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize += 1;  // modeSInterrogatorStatus
   marshalSize += 1;  // padding
   marshalSize += 1;  // modeSLevelsPresent
   marshalSize += 1;  // padding2
   marshalSize += 4;  // padding3
   marshalSize += 4;  // padding4
   marshalSize += 4;  // padding5
   marshalSize += 4;  // padding6
   marshalSize += 4;  // padding7

   return marshalSize;
}


/** Setter for {@link ModeSInterrogatorBasicData#modeSInterrogatorStatus}
  * @param pModeSInterrogatorStatus new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setModeSInterrogatorStatus(byte pModeSInterrogatorStatus)
{
    modeSInterrogatorStatus = pModeSInterrogatorStatus;
    return this;
}
/** Utility setter for {@link ModeSInterrogatorBasicData#modeSInterrogatorStatus}
  * @param pModeSInterrogatorStatus new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setModeSInterrogatorStatus(int pModeSInterrogatorStatus){
    modeSInterrogatorStatus = (byte) pModeSInterrogatorStatus;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#modeSInterrogatorStatus}
  * @return value of interest */
public byte getModeSInterrogatorStatus()
{
    return modeSInterrogatorStatus; 
}

/** Setter for {@link ModeSInterrogatorBasicData#padding}
  * @param pPadding new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding(byte pPadding)
{
    padding = pPadding;
    return this;
}
/** Utility setter for {@link ModeSInterrogatorBasicData#padding}
  * @param pPadding new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding(int pPadding){
    padding = (byte) pPadding;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#padding}
  * @return value of interest */
public byte getPadding()
{
    return padding; 
}

/** Setter for {@link ModeSInterrogatorBasicData#modeSLevelsPresent}
  * @param pModeSLevelsPresent new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setModeSLevelsPresent(byte pModeSLevelsPresent)
{
    modeSLevelsPresent = pModeSLevelsPresent;
    return this;
}
/** Utility setter for {@link ModeSInterrogatorBasicData#modeSLevelsPresent}
  * @param pModeSLevelsPresent new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setModeSLevelsPresent(int pModeSLevelsPresent){
    modeSLevelsPresent = (byte) pModeSLevelsPresent;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#modeSLevelsPresent}
  * @return value of interest */
public byte getModeSLevelsPresent()
{
    return modeSLevelsPresent; 
}

/** Setter for {@link ModeSInterrogatorBasicData#padding2}
  * @param pPadding2 new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding2(byte pPadding2)
{
    padding2 = pPadding2;
    return this;
}
/** Utility setter for {@link ModeSInterrogatorBasicData#padding2}
  * @param pPadding2 new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding2(int pPadding2){
    padding2 = (byte) pPadding2;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#padding2}
  * @return value of interest */
public byte getPadding2()
{
    return padding2; 
}

/** Setter for {@link ModeSInterrogatorBasicData#padding3}
  * @param pPadding3 new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding3(int pPadding3)
{
    padding3 = pPadding3;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#padding3}
  * @return value of interest */
public int getPadding3()
{
    return padding3; 
}

/** Setter for {@link ModeSInterrogatorBasicData#padding4}
  * @param pPadding4 new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding4(int pPadding4)
{
    padding4 = pPadding4;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#padding4}
  * @return value of interest */
public int getPadding4()
{
    return padding4; 
}

/** Setter for {@link ModeSInterrogatorBasicData#padding5}
  * @param pPadding5 new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding5(int pPadding5)
{
    padding5 = pPadding5;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#padding5}
  * @return value of interest */
public int getPadding5()
{
    return padding5; 
}

/** Setter for {@link ModeSInterrogatorBasicData#padding6}
  * @param pPadding6 new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding6(int pPadding6)
{
    padding6 = pPadding6;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#padding6}
  * @return value of interest */
public int getPadding6()
{
    return padding6; 
}

/** Setter for {@link ModeSInterrogatorBasicData#padding7}
  * @param pPadding7 new value of interest
  * @return same object to permit progressive setters */
public ModeSInterrogatorBasicData setPadding7(int pPadding7)
{
    padding7 = pPadding7;
    return this;
}
/** Getter for {@link ModeSInterrogatorBasicData#padding7}
  * @return value of interest */
public int getPadding7()
{
    return padding7; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    try 
    {
       dos.writeByte(modeSInterrogatorStatus);
       dos.writeByte(padding);
       dos.writeByte(modeSLevelsPresent);
       dos.writeByte(padding2);
       dos.writeInt(padding3);
       dos.writeInt(padding4);
       dos.writeInt(padding5);
       dos.writeInt(padding6);
       dos.writeInt(padding7);
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    try 
    {
        modeSInterrogatorStatus = (byte)dis.readUnsignedByte();
        uPosition += 1;
        padding = (byte)dis.readUnsignedByte();
        uPosition += 1;
        modeSLevelsPresent = (byte)dis.readUnsignedByte();
        uPosition += 1;
        padding2 = (byte)dis.readUnsignedByte();
        uPosition += 1;
        padding3 = dis.readInt();
        uPosition += 4;
        padding4 = dis.readInt();
        uPosition += 4;
        padding5 = dis.readInt();
        uPosition += 4;
        padding6 = dis.readInt();
        uPosition += 4;
        padding7 = dis.readInt();
        uPosition += 4;
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   byteBuffer.put( (byte)modeSInterrogatorStatus);
   byteBuffer.put( (byte)padding);
   byteBuffer.put( (byte)modeSLevelsPresent);
   byteBuffer.put( (byte)padding2);
   byteBuffer.putInt( (int)padding3);
   byteBuffer.putInt( (int)padding4);
   byteBuffer.putInt( (int)padding5);
   byteBuffer.putInt( (int)padding6);
   byteBuffer.putInt( (int)padding7);
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    try
    {
        // attribute modeSInterrogatorStatus marked as not serialized
        modeSInterrogatorStatus = (byte)(byteBuffer.get() & 0xFF);
        // attribute padding marked as not serialized
        padding = (byte)(byteBuffer.get() & 0xFF);
        // attribute modeSLevelsPresent marked as not serialized
        modeSLevelsPresent = (byte)(byteBuffer.get() & 0xFF);
        // attribute padding2 marked as not serialized
        padding2 = (byte)(byteBuffer.get() & 0xFF);
        // attribute padding3 marked as not serialized
        padding3 = byteBuffer.getInt();
        // attribute padding4 marked as not serialized
        padding4 = byteBuffer.getInt();
        // attribute padding5 marked as not serialized
        padding5 = byteBuffer.getInt();
        // attribute padding6 marked as not serialized
        padding6 = byteBuffer.getInt();
        // attribute padding7 marked as not serialized
        padding7 = byteBuffer.getInt();
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

 /**
  * Compare all fields that contribute to the state, ignoring
  * transient and static fields, for <code>this</code> and the supplied object
  * @param obj the object to compare to
  * @return true if the objects are equal, false otherwise.
  */
 public boolean equalsImpl(Object obj)
 {
     boolean ivarsEqual = true;

     final ModeSInterrogatorBasicData rhs = (ModeSInterrogatorBasicData)obj;

     if( ! (modeSInterrogatorStatus == rhs.modeSInterrogatorStatus)) ivarsEqual = false;
     if( ! (padding == rhs.padding)) ivarsEqual = false;
     if( ! (modeSLevelsPresent == rhs.modeSLevelsPresent)) ivarsEqual = false;
     if( ! (padding2 == rhs.padding2)) ivarsEqual = false;
     if( ! (padding3 == rhs.padding3)) ivarsEqual = false;
     if( ! (padding4 == rhs.padding4)) ivarsEqual = false;
     if( ! (padding5 == rhs.padding5)) ivarsEqual = false;
     if( ! (padding6 == rhs.padding6)) ivarsEqual = false;
     if( ! (padding7 == rhs.padding7)) ivarsEqual = false;
    return ivarsEqual;
 }

 @Override
 public String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" modeSInterrogatorStatus:").append(modeSInterrogatorStatus); // writeOneToString
    sb.append(" padding:").append(padding); // writeOneToString
    sb.append(" modeSLevelsPresent:").append(modeSLevelsPresent); // writeOneToString
    sb.append(" padding2:").append(padding2); // writeOneToString
    sb.append(" padding3:").append(padding3); // writeOneToString
    sb.append(" padding4:").append(padding4); // writeOneToString
    sb.append(" padding5:").append(padding5); // writeOneToString
    sb.append(" padding6:").append(padding6); // writeOneToString
    sb.append(" padding7:").append(padding7); // writeOneToString

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.modeSInterrogatorStatus,
	                     this.padding,
	                     this.modeSLevelsPresent,
	                     this.padding2,
	                     this.padding3,
	                     this.padding4,
	                     this.padding5,
	                     this.padding6,
	                     this.padding7);
 }
} // end of class
