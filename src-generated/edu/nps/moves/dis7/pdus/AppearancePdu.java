/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;
import java.nio.ByteBuffer;

/**
 * 9.4.3 Communicate information about the appearance of a live entity.
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public class AppearancePdu extends LiveEntityFamilyPdu implements Serializable
{
   /** liveEntityId is an undescribed parameter... */
   protected EntityID  liveEntityId = new EntityID(); 

   /** 16-bit bit field */
   protected short appearanceFlags;

   /**  uid 6 */
   protected ForceID forceId = ForceID.values()[0];

   /** entityType is an undescribed parameter... */
   protected EntityType  entityType = new EntityType(); 

   /** alternateEntityType is an undescribed parameter... */
   protected EntityType  alternateEntityType = new EntityType(); 

   /** entityMarking is an undescribed parameter... */
   protected EntityMarking  entityMarking = new EntityMarking(); 

   /**  uid 55 */
   protected EntityCapabilities capabilities = new LandPlatformCapabilities();

   /** appearanceFields is an undescribed parameter... */
   protected Appearance  appearanceFields = new Appearance(); 


/** Constructor creates and configures a new instance object */
 public AppearancePdu()
 {
    setPduType( DisPduType.APPEARANCE );
 }
/** copy method creates a deep copy of current object using preferred marshalling method
 * @return deep copy of PDU */
 public AppearancePdu copy()
 {
     return copyDataOutputStream();
 }
/** Creates a "deep copy" of current object using ByteBuffer methods.
 * @return deep copy of PDU */
 public AppearancePdu copyByteBuffer()
 {
     AppearancePdu newCopy = new AppearancePdu();
     ByteBuffer byteBuffer = ByteBuffer.allocate(400);
     try
     {
         this.marshal(byteBuffer);      // working
         newCopy.unmarshal(byteBuffer); // not working
     }
     catch (Exception e)
     {
         System.out.println("AppearancePdu deep copy() marshall/unmarshall ByteBuffer exception " + e.getMessage());
         e.printStackTrace();
         System.exit(-1);
     }
     return newCopy;
 }

/** byteArrayOutputStream (baos) is used for marshal/unmarshal serialization
   * @see copyDataOutputStream() */
protected ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
/** dataOutputStream (dos) is used for marshal/unmarshal serialization
   * @see copyDataOutputStream() */
protected DataOutputStream      dataOutputStream      = new DataOutputStream(byteArrayOutputStream);

/** copy method creates a deep copy of current object using DataOutputStream methods.
 * @return deep copy of PDU */
 public AppearancePdu copyDataOutputStream()
 {
     AppearancePdu newCopy = new AppearancePdu();
     try
     {
         this.marshal(dataOutputStream);
         byte[] byteArrayDOS = byteArrayOutputStream.toByteArray();
         newCopy.unmarshal(ByteBuffer.wrap(byteArrayDOS));
     }
     catch (Exception e)
     {
         System.out.println("AppearancePdu deep copy() marshall/unmarshall DataOutputStream exception " + e.getMessage());
         e.printStackTrace();
         System.exit(-1);
     }
        try
        {
                 dataOutputStream.flush();
            byteArrayOutputStream.flush();
            byteArrayOutputStream.reset();
        }
        catch (IOException ioe)
        {
            System.out.println("AppearancePdu copyDataOutputStream() flush IOException: " + ioe.getMessage());
        }
     return newCopy;
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize = super.getMarshalledSize();
   if (liveEntityId != null)
       marshalSize += liveEntityId.getMarshalledSize();
   marshalSize += 2;  // appearanceFlags
   if (forceId != null)
       marshalSize += forceId.getMarshalledSize();
   if (entityType != null)
       marshalSize += entityType.getMarshalledSize();
   if (alternateEntityType != null)
       marshalSize += alternateEntityType.getMarshalledSize();
   if (entityMarking != null)
       marshalSize += entityMarking.getMarshalledSize();
   if (capabilities != null)
       marshalSize += capabilities.getMarshalledSize();
   if (appearanceFields != null)
       marshalSize += appearanceFields.getMarshalledSize();

   return marshalSize;
}


/** Setter for {@link AppearancePdu#liveEntityId}
  * @param pLiveEntityId new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setLiveEntityId(EntityID pLiveEntityId)
{
    liveEntityId = pLiveEntityId;
    return this;
}
/** Getter for {@link AppearancePdu#liveEntityId}
  * @return value of interest */
public EntityID getLiveEntityId()
{
    return liveEntityId;
}


/** Setter for {@link AppearancePdu#appearanceFlags}
  * @param pAppearanceFlags new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setAppearanceFlags(short pAppearanceFlags)
{
    appearanceFlags = pAppearanceFlags;
    return this;
}
/** Utility setter for {@link AppearancePdu#appearanceFlags}
  * @param pAppearanceFlags new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setAppearanceFlags(int pAppearanceFlags){
    appearanceFlags = (short) pAppearanceFlags;
    return this;
}
/** Getter for {@link AppearancePdu#appearanceFlags}
  * @return value of interest */
public short getAppearanceFlags()
{
    return appearanceFlags; 
}

/** Setter for {@link AppearancePdu#forceId}
  * @param pForceId new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setForceId(ForceID pForceId)
{
    forceId = pForceId;
    return this;
}
/** Getter for {@link AppearancePdu#forceId}
  * @return value of interest */
public ForceID getForceId()
{
    return forceId; 
}

/** Setter for {@link AppearancePdu#entityType}
  * @param pEntityType new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setEntityType(EntityType pEntityType)
{
    entityType = pEntityType;
    return this;
}
/** Getter for {@link AppearancePdu#entityType}
  * @return value of interest */
public EntityType getEntityType()
{
    return entityType;
}


/** Setter for {@link AppearancePdu#alternateEntityType}
  * @param pAlternateEntityType new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setAlternateEntityType(EntityType pAlternateEntityType)
{
    alternateEntityType = pAlternateEntityType;
    return this;
}
/** Getter for {@link AppearancePdu#alternateEntityType}
  * @return value of interest */
public EntityType getAlternateEntityType()
{
    return alternateEntityType;
}


/** Setter for {@link AppearancePdu#entityMarking}
  * @param pEntityMarking new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setEntityMarking(EntityMarking pEntityMarking)
{
    entityMarking = pEntityMarking;
    return this;
}
/** Getter for {@link AppearancePdu#entityMarking}
  * @return value of interest */
public EntityMarking getEntityMarking()
{
    return entityMarking;
}


/** Setter for {@link AppearancePdu#capabilities}
  * @param pCapabilities new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setCapabilities(EntityCapabilities pCapabilities)
{
    capabilities = pCapabilities;
    return this;
}
/** Getter for {@link AppearancePdu#capabilities}
  * @return value of interest */
public EntityCapabilities getCapabilities()
{
    return capabilities; 
}

/** Setter for {@link AppearancePdu#appearanceFields}
  * @param pAppearanceFields new value of interest
  * @return same object to permit progressive setters */
public AppearancePdu setAppearanceFields(Appearance pAppearanceFields)
{
    appearanceFields = pAppearanceFields;
    return this;
}
/** Getter for {@link AppearancePdu#appearanceFields}
  * @return value of interest */
public Appearance getAppearanceFields()
{
    return appearanceFields;
}


/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    super.marshal(dos);
    try 
    {
       liveEntityId.marshal(dos);
       dos.writeShort(appearanceFlags);
       forceId.marshal(dos);
       entityType.marshal(dos);
       alternateEntityType.marshal(dos);
       entityMarking.marshal(dos);
       capabilities.marshal(dos);
       appearanceFields.marshal(dos);
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    uPosition += super.unmarshal(dis);

    try 
    {
        uPosition += liveEntityId.unmarshal(dis);
        appearanceFlags = (short)dis.readUnsignedShort();
        uPosition += 2;
        forceId = ForceID.unmarshalEnum(dis);
        uPosition += forceId.getMarshalledSize();
        uPosition += entityType.unmarshal(dis);
        uPosition += alternateEntityType.unmarshal(dis);
        uPosition += entityMarking.unmarshal(dis);
        uPosition += capabilities.unmarshal(dis);
        uPosition += appearanceFields.unmarshal(dis);
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   super.marshal(byteBuffer);
   liveEntityId.marshal(byteBuffer);
   byteBuffer.putShort( (short)appearanceFlags);
   forceId.marshal(byteBuffer);
   entityType.marshal(byteBuffer);
   alternateEntityType.marshal(byteBuffer);
   entityMarking.marshal(byteBuffer);
   capabilities.marshal(byteBuffer);
   appearanceFields.marshal(byteBuffer);
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    super.unmarshal(byteBuffer);

    try
    {
        // attribute liveEntityId marked as not serialized
        liveEntityId.unmarshal(byteBuffer);
        // attribute appearanceFlags marked as not serialized
        appearanceFlags = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute forceId marked as not serialized
        forceId = ForceID.unmarshalEnum(byteBuffer);
        // attribute entityType marked as not serialized
        entityType.unmarshal(byteBuffer);
        // attribute alternateEntityType marked as not serialized
        alternateEntityType.unmarshal(byteBuffer);
        // attribute entityMarking marked as not serialized
        entityMarking.unmarshal(byteBuffer);
        // attribute capabilities marked as not serialized
        capabilities.unmarshal(byteBuffer);
        // attribute appearanceFields marked as not serialized
        appearanceFields.unmarshal(byteBuffer);
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

@Override
 public boolean equalsImpl(Object obj)
 {
     boolean ivarsEqual = true;

     final AppearancePdu rhs = (AppearancePdu)obj;

     if( ! (liveEntityId.equals( rhs.liveEntityId) )) ivarsEqual = false;
     if( ! (appearanceFlags == rhs.appearanceFlags)) ivarsEqual = false;
     if( ! (forceId == rhs.forceId)) ivarsEqual = false;
     if( ! (entityType.equals( rhs.entityType) )) ivarsEqual = false;
     if( ! (alternateEntityType.equals( rhs.alternateEntityType) )) ivarsEqual = false;
     if( ! (entityMarking.equals( rhs.entityMarking) )) ivarsEqual = false;
     if( ! (capabilities.equals( rhs.capabilities) )) ivarsEqual = false;
     if( ! (appearanceFields.equals( rhs.appearanceFields) )) ivarsEqual = false;
    return ivarsEqual && super.equalsImpl(rhs);
 }

 @Override
 public String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" liveEntityId:").append(liveEntityId); // writeOneToString
    sb.append(" appearanceFlags:").append(appearanceFlags); // writeOneToString
    sb.append(" forceId:").append(forceId); // writeOneToString
    sb.append(" entityType:").append(entityType); // writeOneToString
    sb.append(" alternateEntityType:").append(alternateEntityType); // writeOneToString
    sb.append(" entityMarking:").append(entityMarking); // writeOneToString
    sb.append(" capabilities:").append(capabilities); // writeOneToString
    sb.append(" appearanceFields:").append(appearanceFields); // writeOneToString

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.liveEntityId,
	                     this.appearanceFlags,
	                     this.forceId,
	                     this.entityType,
	                     this.alternateEntityType,
	                     this.entityMarking,
	                     this.capabilities,
	                     this.appearanceFields);
 }
} // end of class
