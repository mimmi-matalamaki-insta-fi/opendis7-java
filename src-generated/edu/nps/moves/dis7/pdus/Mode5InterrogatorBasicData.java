/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;

/**
 * B.2.26. Mode 5 interrogator basic data
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public class Mode5InterrogatorBasicData extends Object implements Serializable
{
   /** Mode 5 interrogator status, part of Mode 5 interrogator basic data fields */
   protected byte mode5InterrogatorStatus;

   /** Padding, part of Mode 5 interrogator basic data fields */
   protected byte padding;

   /** Padding, part of Mode 5 interrogator basic data fields */
   protected short padding2;

   /** Mode 5 Message Formats Present, part of Mode 5 interrogator basic data fields */
   protected int mode5MessageFormatsPresent;

   /** Interrogated entity ID, part of Mode 5 interrogator basic data fields */
   protected EntityID  entityID = new EntityID(); 

   /** Padding, part of Mode 5 interrogator basic data fields */
   protected short padding3;


/** Constructor creates and configures a new instance object */
 public Mode5InterrogatorBasicData()
 {
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize += 1;  // mode5InterrogatorStatus
   marshalSize += 1;  // padding
   marshalSize += 2;  // padding2
   marshalSize += 4;  // mode5MessageFormatsPresent
   if (entityID != null)
       marshalSize += entityID.getMarshalledSize();
   marshalSize += 2;  // padding3

   return marshalSize;
}


/** Setter for {@link Mode5InterrogatorBasicData#mode5InterrogatorStatus}
  * @param pMode5InterrogatorStatus new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setMode5InterrogatorStatus(byte pMode5InterrogatorStatus)
{
    mode5InterrogatorStatus = pMode5InterrogatorStatus;
    return this;
}
/** Utility setter for {@link Mode5InterrogatorBasicData#mode5InterrogatorStatus}
  * @param pMode5InterrogatorStatus new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setMode5InterrogatorStatus(int pMode5InterrogatorStatus){
    mode5InterrogatorStatus = (byte) pMode5InterrogatorStatus;
    return this;
}
/** Getter for {@link Mode5InterrogatorBasicData#mode5InterrogatorStatus}
  * @return value of interest */
public byte getMode5InterrogatorStatus()
{
    return mode5InterrogatorStatus; 
}

/** Setter for {@link Mode5InterrogatorBasicData#padding}
  * @param pPadding new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setPadding(byte pPadding)
{
    padding = pPadding;
    return this;
}
/** Utility setter for {@link Mode5InterrogatorBasicData#padding}
  * @param pPadding new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setPadding(int pPadding){
    padding = (byte) pPadding;
    return this;
}
/** Getter for {@link Mode5InterrogatorBasicData#padding}
  * @return value of interest */
public byte getPadding()
{
    return padding; 
}

/** Setter for {@link Mode5InterrogatorBasicData#padding2}
  * @param pPadding2 new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setPadding2(short pPadding2)
{
    padding2 = pPadding2;
    return this;
}
/** Utility setter for {@link Mode5InterrogatorBasicData#padding2}
  * @param pPadding2 new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setPadding2(int pPadding2){
    padding2 = (short) pPadding2;
    return this;
}
/** Getter for {@link Mode5InterrogatorBasicData#padding2}
  * @return value of interest */
public short getPadding2()
{
    return padding2; 
}

/** Setter for {@link Mode5InterrogatorBasicData#mode5MessageFormatsPresent}
  * @param pMode5MessageFormatsPresent new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setMode5MessageFormatsPresent(int pMode5MessageFormatsPresent)
{
    mode5MessageFormatsPresent = pMode5MessageFormatsPresent;
    return this;
}
/** Getter for {@link Mode5InterrogatorBasicData#mode5MessageFormatsPresent}
  * @return value of interest */
public int getMode5MessageFormatsPresent()
{
    return mode5MessageFormatsPresent; 
}

/** Setter for {@link Mode5InterrogatorBasicData#entityID}
  * @param pEntityID new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setEntityID(EntityID pEntityID)
{
    entityID = pEntityID;
    return this;
}
/** Getter for {@link Mode5InterrogatorBasicData#entityID}
  * @return value of interest */
public EntityID getEntityID()
{
    return entityID;
}


/** Setter for {@link Mode5InterrogatorBasicData#padding3}
  * @param pPadding3 new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setPadding3(short pPadding3)
{
    padding3 = pPadding3;
    return this;
}
/** Utility setter for {@link Mode5InterrogatorBasicData#padding3}
  * @param pPadding3 new value of interest
  * @return same object to permit progressive setters */
public Mode5InterrogatorBasicData setPadding3(int pPadding3){
    padding3 = (short) pPadding3;
    return this;
}
/** Getter for {@link Mode5InterrogatorBasicData#padding3}
  * @return value of interest */
public short getPadding3()
{
    return padding3; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    try 
    {
       dos.writeByte(mode5InterrogatorStatus);
       dos.writeByte(padding);
       dos.writeShort(padding2);
       dos.writeInt(mode5MessageFormatsPresent);
       entityID.marshal(dos);
       dos.writeShort(padding3);
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    try 
    {
        mode5InterrogatorStatus = (byte)dis.readUnsignedByte();
        uPosition += 1;
        padding = (byte)dis.readUnsignedByte();
        uPosition += 1;
        padding2 = (short)dis.readUnsignedShort();
        uPosition += 2;
        mode5MessageFormatsPresent = dis.readInt();
        uPosition += 4;
        uPosition += entityID.unmarshal(dis);
        padding3 = (short)dis.readUnsignedShort();
        uPosition += 2;
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   byteBuffer.put( (byte)mode5InterrogatorStatus);
   byteBuffer.put( (byte)padding);
   byteBuffer.putShort( (short)padding2);
   byteBuffer.putInt( (int)mode5MessageFormatsPresent);
   entityID.marshal(byteBuffer);
   byteBuffer.putShort( (short)padding3);
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    try
    {
        // attribute mode5InterrogatorStatus marked as not serialized
        mode5InterrogatorStatus = (byte)(byteBuffer.get() & 0xFF);
        // attribute padding marked as not serialized
        padding = (byte)(byteBuffer.get() & 0xFF);
        // attribute padding2 marked as not serialized
        padding2 = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute mode5MessageFormatsPresent marked as not serialized
        mode5MessageFormatsPresent = byteBuffer.getInt();
        // attribute entityID marked as not serialized
        entityID.unmarshal(byteBuffer);
        // attribute padding3 marked as not serialized
        padding3 = (short)(byteBuffer.getShort() & 0xFFFF);
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

 /**
  * Compare all fields that contribute to the state, ignoring
  * transient and static fields, for <code>this</code> and the supplied object
  * @param obj the object to compare to
  * @return true if the objects are equal, false otherwise.
  */
 public boolean equalsImpl(Object obj)
 {
     final Mode5InterrogatorBasicData rhs = (Mode5InterrogatorBasicData)obj;

     if( ! (mode5InterrogatorStatus == rhs.mode5InterrogatorStatus)) return false;
     if( ! (padding == rhs.padding)) return false;
     if( ! (padding2 == rhs.padding2)) return false;
     if( ! (mode5MessageFormatsPresent == rhs.mode5MessageFormatsPresent)) return false;
     if( ! Objects.equals(entityID, rhs.entityID) ) return false;
     if( ! (padding3 == rhs.padding3)) return false;
    return true;
 }

 @Override
 public String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" mode5InterrogatorStatus:").append(mode5InterrogatorStatus); // writeOneToString
    sb.append(" padding:").append(padding); // writeOneToString
    sb.append(" padding2:").append(padding2); // writeOneToString
    sb.append(" mode5MessageFormatsPresent:").append(mode5MessageFormatsPresent); // writeOneToString
    sb.append(" entityID:").append(entityID); // writeOneToString
    sb.append(" padding3:").append(padding3); // writeOneToString

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.mode5InterrogatorStatus,
	                     this.padding,
	                     this.padding2,
	                     this.mode5MessageFormatsPresent,
	                     this.entityID,
	                     this.padding3);
 }
} // end of class
