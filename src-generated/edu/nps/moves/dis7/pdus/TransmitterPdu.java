/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;
import java.nio.ByteBuffer;

/**
 * 5.8.3 Communicates the state of a particular radio transmitter or simple intercom.
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public class TransmitterPdu extends RadioCommunicationsFamilyPdu implements Serializable
{
   /** header is an undescribed parameter... */
   protected RadioCommsHeader  header = new RadioCommsHeader(); 

   /** Type of radio */
   protected RadioType  radioEntityType = new RadioType(); 

   /** transmit state uid 164 */
   protected TransmitterTransmitState transmitState = TransmitterTransmitState.values()[0];

   /** input source uid 165 */
   protected TransmitterInputSource inputSource = TransmitterInputSource.values()[0];

   /** count field */
   protected short variableTransmitterParameterCount;

   /** Location of antenna */
   protected Vector3Double  antennaLocation = new Vector3Double(); 

   /** relative location of antenna */
   protected Vector3Float  relativeAntennaLocation = new Vector3Float(); 

   /** antenna pattern type uid 167 */
   protected TransmitterAntennaPatternType antennaPatternType = TransmitterAntennaPatternType.values()[0];

   /** atenna pattern length */
   protected short antennaPatternCount;

   /** frequency */
   protected long frequency;

   /** transmit frequency Bandwidth */
   protected float transmitFrequencyBandwidth;

   /** transmission power */
   protected float power;

   /** modulation */
   protected ModulationType  modulationType = new ModulationType(); 

   /** crypto system enumeration uid 166 */
   protected TransmitterCryptoSystem cryptoSystem = TransmitterCryptoSystem.values()[0];

   /** crypto system key identifer */
   protected short cryptoKeyId;

   /** how many modulation parameters we have */
   protected byte modulationParameterCount;

   /** padding1 is an undescribed parameter... */
   protected byte padding1 = (byte)0;

   /** padding2 is an undescribed parameter... */
   protected short padding2 = (short)0;

   /** variable length list of modulation parameters */
   protected List< ModulationParameters > modulationParametersList = new ArrayList< ModulationParameters >();
 
   /** variable length list of antenna pattern records */
   protected List< VariableTransmitterParameters > antennaPatternList = new ArrayList< VariableTransmitterParameters >();
 

/** Constructor creates and configures a new instance object */
 public TransmitterPdu()
 {
    setPduType( DisPduType.TRANSMITTER );
 }
/** copy method creates a deep copy of current object using preferred marshalling method
 * @return deep copy of PDU */
 public TransmitterPdu copy()
 {
     return copyDataOutputStream();
 }
/** Creates a "deep copy" of current object using ByteBuffer methods.
 * @return deep copy of PDU */
 public TransmitterPdu copyByteBuffer()
 {
     TransmitterPdu newCopy = new TransmitterPdu();
     ByteBuffer byteBuffer = ByteBuffer.allocate(400);
     try
     {
         this.marshal(byteBuffer);      // working
         newCopy.unmarshal(byteBuffer); // not working
     }
     catch (Exception e)
     {
         System.out.println("TransmitterPdu deep copy() marshall/unmarshall ByteBuffer exception " + e.getMessage());
         e.printStackTrace();
         System.exit(-1);
     }
     return newCopy;
 }

/** byteArrayOutputStream (baos) is used for marshal/unmarshal serialization
   * @see copyDataOutputStream() */
protected ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
/** dataOutputStream (dos) is used for marshal/unmarshal serialization
   * @see copyDataOutputStream() */
protected DataOutputStream      dataOutputStream      = new DataOutputStream(byteArrayOutputStream);

/** copy method creates a deep copy of current object using DataOutputStream methods.
 * @return deep copy of PDU */
 public TransmitterPdu copyDataOutputStream()
 {
     TransmitterPdu newCopy = new TransmitterPdu();
     try
     {
         this.marshal(dataOutputStream);
         byte[] byteArrayDOS = byteArrayOutputStream.toByteArray();
         newCopy.unmarshal(ByteBuffer.wrap(byteArrayDOS));
     }
     catch (Exception e)
     {
         System.out.println("TransmitterPdu deep copy() marshall/unmarshall DataOutputStream exception " + e.getMessage());
         e.printStackTrace();
         System.exit(-1);
     }
        try
        {
                 dataOutputStream.flush();
            byteArrayOutputStream.flush();
            byteArrayOutputStream.reset();
        }
        catch (IOException ioe)
        {
            System.out.println("TransmitterPdu copyDataOutputStream() flush IOException: " + ioe.getMessage());
        }
     return newCopy;
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize = super.getMarshalledSize();
   if (header != null)
       marshalSize += header.getMarshalledSize();
   if (radioEntityType != null)
       marshalSize += radioEntityType.getMarshalledSize();
   if (transmitState != null)
       marshalSize += transmitState.getMarshalledSize();
   if (inputSource != null)
       marshalSize += inputSource.getMarshalledSize();
   marshalSize += 2;  // variableTransmitterParameterCount
   if (antennaLocation != null)
       marshalSize += antennaLocation.getMarshalledSize();
   if (relativeAntennaLocation != null)
       marshalSize += relativeAntennaLocation.getMarshalledSize();
   if (antennaPatternType != null)
       marshalSize += antennaPatternType.getMarshalledSize();
   marshalSize += 2;  // antennaPatternCount
   marshalSize += 8;  // frequency
   marshalSize += 4;  // transmitFrequencyBandwidth
   marshalSize += 4;  // power
   if (modulationType != null)
       marshalSize += modulationType.getMarshalledSize();
   if (cryptoSystem != null)
       marshalSize += cryptoSystem.getMarshalledSize();
   marshalSize += 2;  // cryptoKeyId
   marshalSize += 1;  // modulationParameterCount
   marshalSize += 1;  // padding1
   marshalSize += 2;  // padding2
   if (modulationParametersList != null)
       for (int idx=0; idx < modulationParametersList.size(); idx++)
       {
            ModulationParameters listElement = modulationParametersList.get(idx);
            marshalSize += listElement.getMarshalledSize();
       }
   if (antennaPatternList != null)
       for (int idx=0; idx < antennaPatternList.size(); idx++)
       {
            VariableTransmitterParameters listElement = antennaPatternList.get(idx);
            marshalSize += listElement.getMarshalledSize();
       }

   return marshalSize;
}


/** Setter for {@link TransmitterPdu#header}
  * @param pHeader new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setHeader(RadioCommsHeader pHeader)
{
    header = pHeader;
    return this;
}
/** Getter for {@link TransmitterPdu#header}
  * @return value of interest */
public RadioCommsHeader getHeader()
{
    return header;
}


/** Setter for {@link TransmitterPdu#radioEntityType}
  * @param pRadioEntityType new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setRadioEntityType(RadioType pRadioEntityType)
{
    radioEntityType = pRadioEntityType;
    return this;
}
/** Getter for {@link TransmitterPdu#radioEntityType}
  * @return value of interest */
public RadioType getRadioEntityType()
{
    return radioEntityType;
}


/** Setter for {@link TransmitterPdu#transmitState}
  * @param pTransmitState new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setTransmitState(TransmitterTransmitState pTransmitState)
{
    transmitState = pTransmitState;
    return this;
}
/** Getter for {@link TransmitterPdu#transmitState}
  * @return value of interest */
public TransmitterTransmitState getTransmitState()
{
    return transmitState; 
}

/** Setter for {@link TransmitterPdu#inputSource}
  * @param pInputSource new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setInputSource(TransmitterInputSource pInputSource)
{
    inputSource = pInputSource;
    return this;
}
/** Getter for {@link TransmitterPdu#inputSource}
  * @return value of interest */
public TransmitterInputSource getInputSource()
{
    return inputSource; 
}

/** Setter for {@link TransmitterPdu#variableTransmitterParameterCount}
  * @param pVariableTransmitterParameterCount new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setVariableTransmitterParameterCount(short pVariableTransmitterParameterCount)
{
    variableTransmitterParameterCount = pVariableTransmitterParameterCount;
    return this;
}
/** Utility setter for {@link TransmitterPdu#variableTransmitterParameterCount}
  * @param pVariableTransmitterParameterCount new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setVariableTransmitterParameterCount(int pVariableTransmitterParameterCount){
    variableTransmitterParameterCount = (short) pVariableTransmitterParameterCount;
    return this;
}
/** Getter for {@link TransmitterPdu#variableTransmitterParameterCount}
  * @return value of interest */
public short getVariableTransmitterParameterCount()
{
    return variableTransmitterParameterCount; 
}

/** Setter for {@link TransmitterPdu#antennaLocation}
  * @param pAntennaLocation new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setAntennaLocation(Vector3Double pAntennaLocation)
{
    antennaLocation = pAntennaLocation;
    return this;
}
/** Getter for {@link TransmitterPdu#antennaLocation}
  * @return value of interest */
public Vector3Double getAntennaLocation()
{
    return antennaLocation;
}


/** Setter for {@link TransmitterPdu#relativeAntennaLocation}
  * @param pRelativeAntennaLocation new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setRelativeAntennaLocation(Vector3Float pRelativeAntennaLocation)
{
    relativeAntennaLocation = pRelativeAntennaLocation;
    return this;
}
/** Getter for {@link TransmitterPdu#relativeAntennaLocation}
  * @return value of interest */
public Vector3Float getRelativeAntennaLocation()
{
    return relativeAntennaLocation;
}


/** Setter for {@link TransmitterPdu#antennaPatternType}
  * @param pAntennaPatternType new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setAntennaPatternType(TransmitterAntennaPatternType pAntennaPatternType)
{
    antennaPatternType = pAntennaPatternType;
    return this;
}
/** Getter for {@link TransmitterPdu#antennaPatternType}
  * @return value of interest */
public TransmitterAntennaPatternType getAntennaPatternType()
{
    return antennaPatternType; 
}

/** Setter for {@link TransmitterPdu#frequency}
  * @param pFrequency new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setFrequency(long pFrequency)
{
    frequency = pFrequency;
    return this;
}
/** Utility setter for {@link TransmitterPdu#frequency}
  * @param pFrequency new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setFrequency(int pFrequency){
    frequency = (long) pFrequency;
    return this;
}
/** Getter for {@link TransmitterPdu#frequency}
  * @return value of interest */
public long getFrequency()
{
    return frequency; 
}

/** Setter for {@link TransmitterPdu#transmitFrequencyBandwidth}
  * @param pTransmitFrequencyBandwidth new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setTransmitFrequencyBandwidth(float pTransmitFrequencyBandwidth)
{
    transmitFrequencyBandwidth = pTransmitFrequencyBandwidth;
    return this;
}
/** Getter for {@link TransmitterPdu#transmitFrequencyBandwidth}
  * @return value of interest */
public float getTransmitFrequencyBandwidth()
{
    return transmitFrequencyBandwidth; 
}

/** Setter for {@link TransmitterPdu#power}
  * @param pPower new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setPower(float pPower)
{
    power = pPower;
    return this;
}
/** Getter for {@link TransmitterPdu#power}
  * @return value of interest */
public float getPower()
{
    return power; 
}

/** Setter for {@link TransmitterPdu#modulationType}
  * @param pModulationType new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setModulationType(ModulationType pModulationType)
{
    modulationType = pModulationType;
    return this;
}
/** Getter for {@link TransmitterPdu#modulationType}
  * @return value of interest */
public ModulationType getModulationType()
{
    return modulationType;
}


/** Setter for {@link TransmitterPdu#cryptoSystem}
  * @param pCryptoSystem new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setCryptoSystem(TransmitterCryptoSystem pCryptoSystem)
{
    cryptoSystem = pCryptoSystem;
    return this;
}
/** Getter for {@link TransmitterPdu#cryptoSystem}
  * @return value of interest */
public TransmitterCryptoSystem getCryptoSystem()
{
    return cryptoSystem; 
}

/** Setter for {@link TransmitterPdu#cryptoKeyId}
  * @param pCryptoKeyId new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setCryptoKeyId(short pCryptoKeyId)
{
    cryptoKeyId = pCryptoKeyId;
    return this;
}
/** Utility setter for {@link TransmitterPdu#cryptoKeyId}
  * @param pCryptoKeyId new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setCryptoKeyId(int pCryptoKeyId){
    cryptoKeyId = (short) pCryptoKeyId;
    return this;
}
/** Getter for {@link TransmitterPdu#cryptoKeyId}
  * @return value of interest */
public short getCryptoKeyId()
{
    return cryptoKeyId; 
}

/** Setter for {@link TransmitterPdu#padding1}
  * @param pPadding1 new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setPadding1(byte pPadding1)
{
    padding1 = pPadding1;
    return this;
}
/** Utility setter for {@link TransmitterPdu#padding1}
  * @param pPadding1 new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setPadding1(int pPadding1){
    padding1 = (byte) pPadding1;
    return this;
}
/** Getter for {@link TransmitterPdu#padding1}
  * @return value of interest */
public byte getPadding1()
{
    return padding1; 
}

/** Setter for {@link TransmitterPdu#padding2}
  * @param pPadding2 new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setPadding2(short pPadding2)
{
    padding2 = pPadding2;
    return this;
}
/** Utility setter for {@link TransmitterPdu#padding2}
  * @param pPadding2 new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setPadding2(int pPadding2){
    padding2 = (short) pPadding2;
    return this;
}
/** Getter for {@link TransmitterPdu#padding2}
  * @return value of interest */
public short getPadding2()
{
    return padding2; 
}

/** Setter for {@link TransmitterPdu#modulationParametersList}
  * @param pModulationParametersList new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setModulationParametersList(List<ModulationParameters> pModulationParametersList)
{
    modulationParametersList = pModulationParametersList;
    return this;
}
/** Getter for {@link TransmitterPdu#modulationParametersList}
  * @return value of interest */
public List<ModulationParameters> getModulationParametersList()
{
    return modulationParametersList; 
}

/** Setter for {@link TransmitterPdu#antennaPatternList}
  * @param pAntennaPatternList new value of interest
  * @return same object to permit progressive setters */
public TransmitterPdu setAntennaPatternList(List<VariableTransmitterParameters> pAntennaPatternList)
{
    antennaPatternList = pAntennaPatternList;
    return this;
}
/** Getter for {@link TransmitterPdu#antennaPatternList}
  * @return value of interest */
public List<VariableTransmitterParameters> getAntennaPatternList()
{
    return antennaPatternList; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    super.marshal(dos);
    try 
    {
       header.marshal(dos);
       radioEntityType.marshal(dos);
       transmitState.marshal(dos);
       inputSource.marshal(dos);
       dos.writeShort(variableTransmitterParameterCount);
       antennaLocation.marshal(dos);
       relativeAntennaLocation.marshal(dos);
       antennaPatternType.marshal(dos);
       dos.writeShort(antennaPatternList.size());
       dos.writeLong(frequency);
       dos.writeFloat(transmitFrequencyBandwidth);
       dos.writeFloat(power);
       modulationType.marshal(dos);
       cryptoSystem.marshal(dos);
       dos.writeShort(cryptoKeyId);
       dos.writeByte(modulationParametersList.size());
       dos.writeByte(padding1);
       dos.writeShort(padding2);

       for (int idx = 0; idx < modulationParametersList.size(); idx++)
       {
            ModulationParameters aModulationParameters = modulationParametersList.get(idx);
            aModulationParameters.marshal(dos);
       }


       for (int idx = 0; idx < antennaPatternList.size(); idx++)
       {
            VariableTransmitterParameters aVariableTransmitterParameters = antennaPatternList.get(idx);
            aVariableTransmitterParameters.marshal(dos);
       }

    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    uPosition += super.unmarshal(dis);

    try 
    {
        uPosition += header.unmarshal(dis);
        uPosition += radioEntityType.unmarshal(dis);
        transmitState = TransmitterTransmitState.unmarshalEnum(dis);
        uPosition += transmitState.getMarshalledSize();
        inputSource = TransmitterInputSource.unmarshalEnum(dis);
        uPosition += inputSource.getMarshalledSize();
        variableTransmitterParameterCount = (short)dis.readUnsignedShort();
        uPosition += 2;
        uPosition += antennaLocation.unmarshal(dis);
        uPosition += relativeAntennaLocation.unmarshal(dis);
        antennaPatternType = TransmitterAntennaPatternType.unmarshalEnum(dis);
        uPosition += antennaPatternType.getMarshalledSize();
        antennaPatternCount = (short)dis.readUnsignedShort();
        uPosition += 2;
        frequency = dis.readLong();
        uPosition += 4;
        transmitFrequencyBandwidth = dis.readFloat();
        uPosition += 4;
        power = dis.readFloat();
        uPosition += 4;
        uPosition += modulationType.unmarshal(dis);
        cryptoSystem = TransmitterCryptoSystem.unmarshalEnum(dis);
        uPosition += cryptoSystem.getMarshalledSize();
        cryptoKeyId = (short)dis.readUnsignedShort();
        uPosition += 2;
        modulationParameterCount = (byte)dis.readUnsignedByte();
        uPosition += 1;
        padding1 = (byte)dis.readUnsignedByte();
        uPosition += 1;
        padding2 = (short)dis.readUnsignedShort();
        uPosition += 2;
        for (int idx = 0; idx < modulationParameterCount; idx++)
        {
            ModulationParameters anX = new ModulationParameters();
            uPosition += anX.unmarshal(dis);
            modulationParametersList.add(anX);
        }

        for (int idx = 0; idx < antennaPatternCount; idx++)
        {
            VariableTransmitterParameters anX = new VariableTransmitterParameters();
            uPosition += anX.unmarshal(dis);
            antennaPatternList.add(anX);
        }

    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   super.marshal(byteBuffer);
   header.marshal(byteBuffer);
   radioEntityType.marshal(byteBuffer);
   transmitState.marshal(byteBuffer);
   inputSource.marshal(byteBuffer);
   byteBuffer.putShort( (short)variableTransmitterParameterCount);
   antennaLocation.marshal(byteBuffer);
   relativeAntennaLocation.marshal(byteBuffer);
   antennaPatternType.marshal(byteBuffer);
   byteBuffer.putShort( (short)antennaPatternList.size());
   byteBuffer.putLong( (long)frequency);
   byteBuffer.putFloat( (float)transmitFrequencyBandwidth);
   byteBuffer.putFloat( (float)power);
   modulationType.marshal(byteBuffer);
   cryptoSystem.marshal(byteBuffer);
   byteBuffer.putShort( (short)cryptoKeyId);
   byteBuffer.put( (byte)modulationParametersList.size());
   byteBuffer.put( (byte)padding1);
   byteBuffer.putShort( (short)padding2);

   for (int idx = 0; idx < modulationParametersList.size(); idx++)
   {
        ModulationParameters aModulationParameters = modulationParametersList.get(idx);
        aModulationParameters.marshal(byteBuffer);
   }


   for (int idx = 0; idx < antennaPatternList.size(); idx++)
   {
        VariableTransmitterParameters aVariableTransmitterParameters = antennaPatternList.get(idx);
        aVariableTransmitterParameters.marshal(byteBuffer);
   }

}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    super.unmarshal(byteBuffer);

    try
    {
        // attribute header marked as not serialized
        header.unmarshal(byteBuffer);
        // attribute radioEntityType marked as not serialized
        radioEntityType.unmarshal(byteBuffer);
        // attribute transmitState marked as not serialized
        transmitState = TransmitterTransmitState.unmarshalEnum(byteBuffer);
        // attribute inputSource marked as not serialized
        inputSource = TransmitterInputSource.unmarshalEnum(byteBuffer);
        // attribute variableTransmitterParameterCount marked as not serialized
        variableTransmitterParameterCount = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute antennaLocation marked as not serialized
        antennaLocation.unmarshal(byteBuffer);
        // attribute relativeAntennaLocation marked as not serialized
        relativeAntennaLocation.unmarshal(byteBuffer);
        // attribute antennaPatternType marked as not serialized
        antennaPatternType = TransmitterAntennaPatternType.unmarshalEnum(byteBuffer);
        // attribute antennaPatternCount marked as not serialized
        antennaPatternCount = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute frequency marked as not serialized
        frequency = byteBuffer.getLong();
        // attribute transmitFrequencyBandwidth marked as not serialized
        transmitFrequencyBandwidth = byteBuffer.getFloat();
        // attribute power marked as not serialized
        power = byteBuffer.getFloat();
        // attribute modulationType marked as not serialized
        modulationType.unmarshal(byteBuffer);
        // attribute cryptoSystem marked as not serialized
        cryptoSystem = TransmitterCryptoSystem.unmarshalEnum(byteBuffer);
        // attribute cryptoKeyId marked as not serialized
        cryptoKeyId = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute modulationParameterCount marked as not serialized
        modulationParameterCount = (byte)(byteBuffer.get() & 0xFF);
        // attribute padding1 marked as not serialized
        padding1 = (byte)(byteBuffer.get() & 0xFF);
        // attribute padding2 marked as not serialized
        padding2 = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute modulationParametersList marked as not serialized
        for (int idx = 0; idx < modulationParameterCount; idx++)
        {
        ModulationParameters anX = new ModulationParameters();
        anX.unmarshal(byteBuffer);
        modulationParametersList.add(anX);
        }

        // attribute antennaPatternList marked as not serialized
        for (int idx = 0; idx < antennaPatternCount; idx++)
        {
        VariableTransmitterParameters anX = new VariableTransmitterParameters();
        anX.unmarshal(byteBuffer);
        antennaPatternList.add(anX);
        }

    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

@Override
 public boolean equalsImpl(Object obj)
 {
     final TransmitterPdu rhs = (TransmitterPdu)obj;

     if( ! Objects.equals(header, rhs.header) ) return false;
     if( ! Objects.equals(radioEntityType, rhs.radioEntityType) ) return false;
     if( ! (transmitState == rhs.transmitState)) return false;
     if( ! (inputSource == rhs.inputSource)) return false;
     if( ! (variableTransmitterParameterCount == rhs.variableTransmitterParameterCount)) return false;
     if( ! Objects.equals(antennaLocation, rhs.antennaLocation) ) return false;
     if( ! Objects.equals(relativeAntennaLocation, rhs.relativeAntennaLocation) ) return false;
     if( ! (antennaPatternType == rhs.antennaPatternType)) return false;
     if( ! (frequency == rhs.frequency)) return false;
     if( ! (transmitFrequencyBandwidth == rhs.transmitFrequencyBandwidth)) return false;
     if( ! (power == rhs.power)) return false;
     if( ! Objects.equals(modulationType, rhs.modulationType) ) return false;
     if( ! (cryptoSystem == rhs.cryptoSystem)) return false;
     if( ! (cryptoKeyId == rhs.cryptoKeyId)) return false;
     if( ! (padding1 == rhs.padding1)) return false;
     if( ! (padding2 == rhs.padding2)) return false;
     if( ! Objects.equals(modulationParametersList, rhs.modulationParametersList) ) return false;
     if( ! Objects.equals(antennaPatternList, rhs.antennaPatternList) ) return false;
    return super.equalsImpl(rhs);
 }

 @Override
 public String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" header:").append(header); // writeOneToString
    sb.append(" radioEntityType:").append(radioEntityType); // writeOneToString
    sb.append(" transmitState:").append(transmitState); // writeOneToString
    sb.append(" inputSource:").append(inputSource); // writeOneToString
    sb.append(" variableTransmitterParameterCount:").append(variableTransmitterParameterCount); // writeOneToString
    sb.append(" antennaLocation:").append(antennaLocation); // writeOneToString
    sb.append(" relativeAntennaLocation:").append(relativeAntennaLocation); // writeOneToString
    sb.append(" antennaPatternType:").append(antennaPatternType); // writeOneToString
    sb.append(" frequency:").append(frequency); // writeOneToString
    sb.append(" transmitFrequencyBandwidth:").append(transmitFrequencyBandwidth); // writeOneToString
    sb.append(" power:").append(power); // writeOneToString
    sb.append(" modulationType:").append(modulationType); // writeOneToString
    sb.append(" cryptoSystem:").append(cryptoSystem); // writeOneToString
    sb.append(" cryptoKeyId:").append(cryptoKeyId); // writeOneToString
    sb.append(" padding1:").append(padding1); // writeOneToString
    sb.append(" padding2:").append(padding2); // writeOneToString
    sb.append(" modulationParametersList: ");
    modulationParametersList.forEach(r->{ sb2.append(" ").append(r);}); // writeList
    sb.append(sb2.toString().trim());
    // https://stackoverflow.com/questions/2242471/clearing-a-string-buffer-builder-after-loop
    sb2.setLength(0); // reset
    sb.append(" antennaPatternList: ");
    antennaPatternList.forEach(r->{ sb2.append(" ").append(r);}); // writeList
    sb.append(sb2.toString().trim());
    // https://stackoverflow.com/questions/2242471/clearing-a-string-buffer-builder-after-loop
    sb2.setLength(0); // reset

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.header,
	                     this.radioEntityType,
	                     this.transmitState,
	                     this.inputSource,
	                     this.variableTransmitterParameterCount,
	                     this.antennaLocation,
	                     this.relativeAntennaLocation,
	                     this.antennaPatternType,
	                     this.antennaPatternCount,
	                     this.frequency,
	                     this.transmitFrequencyBandwidth,
	                     this.power,
	                     this.modulationType,
	                     this.cryptoSystem,
	                     this.cryptoKeyId,
	                     this.modulationParameterCount,
	                     this.padding1,
	                     this.padding2,
	                     this.modulationParametersList,
	                     this.antennaPatternList);
 }
} // end of class
