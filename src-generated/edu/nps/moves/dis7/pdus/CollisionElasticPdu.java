/**
 * Copyright (c) 2008-2023, MOVES Institute, Naval Postgraduate School (NPS). All rights reserved.
 * This work is provided under a BSD-style open-source license, see project
 * <a href="https://savage.nps.edu/opendis7-java/license.html" target="_blank">license.html</a> and <a href="https://savage.nps.edu/opendis7-java/license.txt" target="_blank">license.txt</a>
 */
// header autogenerated using string template dis7javalicense.txt



package edu.nps.moves.dis7.pdus;

import java.util.*;
import java.io.*;
import edu.nps.moves.dis7.enumerations.*;
import java.nio.ByteBuffer;

/**
 * 7.2.4 Information about elastic collisions in a DIS exercise shall be communicated using a Collision-Elastic PDU. See 5.3.4.
 * @see <a href="https://ieeexplore.ieee.org/document/6387564" target="_blank">IEEE Std 1278.1-2012, IEEE Standard for Distributed Interactive Simulation - Application Protocols</a> 
 */
public class CollisionElasticPdu extends EntityInformationInteractionFamilyPdu implements Serializable
{
   /** This field shall identify the entity that is issuing the PDU and shall be represented by an Entity Identifier record (see 6.2.28) */
   protected EntityID  issuingEntityID = new EntityID(); 

   /** This field shall identify the entity that has collided with the issuing entity. This field shall be a valid identifier of an entity or server capable of responding to the receipt of this Collision-Elastic PDU. This field shall be represented by an Entity Identifier record (see 6.2.28). */
   protected EntityID  collidingEntityID = new EntityID(); 

   /** This field shall contain an identification generated by the issuing simulation application to associate related collision events. This field shall be represented by an Event Identifier record (see 6.2.34). */
   protected EventIdentifier  collisionEventID = new EventIdentifier(); 

   /** some padding */
   protected short pad = (short)0;

   /** This field shall contain the velocity at the time the collision is detected at the point the collision is detected. The velocity shall be represented in world coordinates. This field shall be represented by the Linear Velocity Vector record [see 6.2.95 item c)] */
   protected Vector3Float  contactVelocity = new Vector3Float(); 

   /** This field shall contain the mass of the issuing entity and shall be represented by a 32-bit floating point number representing kilograms */
   protected float mass;

   /** This field shall specify the location of the collision with respect to the entity with which the issuing entity collided. This field shall be represented by an Entity Coordinate Vector record [see 6.2.95 item a)]. */
   protected Vector3Float  locationOfImpact = new Vector3Float(); 

   /** These six records represent the six independent components of a positive semi-definite matrix formed by pre-multiplying and post-multiplying the tensor of inertia, by the anti-symmetric matrix generated by the moment arm, and shall be represented by 32-bit floating point numbers (see 5.3.4.4) */
   protected float collisionIntermediateResultXX;

   /** tensor values */
   protected float collisionIntermediateResultXY;

   /** tensor values */
   protected float collisionIntermediateResultXZ;

   /** tensor values */
   protected float collisionIntermediateResultYY;

   /** tensor values */
   protected float collisionIntermediateResultYZ;

   /** tensor values */
   protected float collisionIntermediateResultZZ;

   /** This record shall represent the normal vector to the surface at the point of collision detection. The surface normal shall be represented in world coordinates. This field shall be represented by an Entity Coordinate Vector record [see 6.2.95 item a)]. */
   protected Vector3Float  unitSurfaceNormal = new Vector3Float(); 

   /** This field shall represent the degree to which energy is conserved in a collision and shall be represented by a 32-bit floating point number. In addition, it represents a free parameter by which simulation application developers may "tune" their collision interactions. */
   protected float coefficientOfRestitution;


/** Constructor creates and configures a new instance object */
 public CollisionElasticPdu()
 {
    setPduType( DisPduType.COLLISION_ELASTIC );
 }
/** copy method creates a deep copy of current object using preferred marshalling method
 * @return deep copy of PDU */
 public CollisionElasticPdu copy()
 {
     return copyDataOutputStream();
 }
/** Creates a "deep copy" of current object using ByteBuffer methods.
 * @return deep copy of PDU */
 public CollisionElasticPdu copyByteBuffer()
 {
     CollisionElasticPdu newCopy = new CollisionElasticPdu();
     ByteBuffer byteBuffer = ByteBuffer.allocate(400);
     try
     {
         this.marshal(byteBuffer);      // working
         newCopy.unmarshal(byteBuffer); // not working
     }
     catch (Exception e)
     {
         System.out.println("CollisionElasticPdu deep copy() marshall/unmarshall ByteBuffer exception " + e.getMessage());
         e.printStackTrace();
         System.exit(-1);
     }
     return newCopy;
 }

/** byteArrayOutputStream (baos) is used for marshal/unmarshal serialization
   * @see copyDataOutputStream() */
protected ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
/** dataOutputStream (dos) is used for marshal/unmarshal serialization
   * @see copyDataOutputStream() */
protected DataOutputStream      dataOutputStream      = new DataOutputStream(byteArrayOutputStream);

/** copy method creates a deep copy of current object using DataOutputStream methods.
 * @return deep copy of PDU */
 public CollisionElasticPdu copyDataOutputStream()
 {
     CollisionElasticPdu newCopy = new CollisionElasticPdu();
     try
     {
         this.marshal(dataOutputStream);
         byte[] byteArrayDOS = byteArrayOutputStream.toByteArray();
         newCopy.unmarshal(ByteBuffer.wrap(byteArrayDOS));
     }
     catch (Exception e)
     {
         System.out.println("CollisionElasticPdu deep copy() marshall/unmarshall DataOutputStream exception " + e.getMessage());
         e.printStackTrace();
         System.exit(-1);
     }
        try
        {
                 dataOutputStream.flush();
            byteArrayOutputStream.flush();
            byteArrayOutputStream.reset();
        }
        catch (IOException ioe)
        {
            System.out.println("CollisionElasticPdu copyDataOutputStream() flush IOException: " + ioe.getMessage());
        }
     return newCopy;
 }

  /**
   * Returns size of this serialized (marshalled) object in bytes
   * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
   * @return serialized size in bytes
   */
public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize = super.getMarshalledSize();
   if (issuingEntityID != null)
       marshalSize += issuingEntityID.getMarshalledSize();
   if (collidingEntityID != null)
       marshalSize += collidingEntityID.getMarshalledSize();
   if (collisionEventID != null)
       marshalSize += collisionEventID.getMarshalledSize();
   marshalSize += 2;  // pad
   if (contactVelocity != null)
       marshalSize += contactVelocity.getMarshalledSize();
   marshalSize += 4;  // mass
   if (locationOfImpact != null)
       marshalSize += locationOfImpact.getMarshalledSize();
   marshalSize += 4;  // collisionIntermediateResultXX
   marshalSize += 4;  // collisionIntermediateResultXY
   marshalSize += 4;  // collisionIntermediateResultXZ
   marshalSize += 4;  // collisionIntermediateResultYY
   marshalSize += 4;  // collisionIntermediateResultYZ
   marshalSize += 4;  // collisionIntermediateResultZZ
   if (unitSurfaceNormal != null)
       marshalSize += unitSurfaceNormal.getMarshalledSize();
   marshalSize += 4;  // coefficientOfRestitution

   return marshalSize;
}


/** Setter for {@link CollisionElasticPdu#issuingEntityID}
  * @param pIssuingEntityID new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setIssuingEntityID(EntityID pIssuingEntityID)
{
    issuingEntityID = pIssuingEntityID;
    return this;
}
/** Getter for {@link CollisionElasticPdu#issuingEntityID}
  * @return value of interest */
public EntityID getIssuingEntityID()
{
    return issuingEntityID;
}


/** Setter for {@link CollisionElasticPdu#collidingEntityID}
  * @param pCollidingEntityID new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCollidingEntityID(EntityID pCollidingEntityID)
{
    collidingEntityID = pCollidingEntityID;
    return this;
}
/** Getter for {@link CollisionElasticPdu#collidingEntityID}
  * @return value of interest */
public EntityID getCollidingEntityID()
{
    return collidingEntityID;
}


/** Setter for {@link CollisionElasticPdu#collisionEventID}
  * @param pCollisionEventID new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCollisionEventID(EventIdentifier pCollisionEventID)
{
    collisionEventID = pCollisionEventID;
    return this;
}
/** Getter for {@link CollisionElasticPdu#collisionEventID}
  * @return value of interest */
public EventIdentifier getCollisionEventID()
{
    return collisionEventID;
}


/** Setter for {@link CollisionElasticPdu#pad}
  * @param pPad new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setPad(short pPad)
{
    pad = pPad;
    return this;
}
/** Utility setter for {@link CollisionElasticPdu#pad}
  * @param pPad new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setPad(int pPad){
    pad = (short) pPad;
    return this;
}
/** Getter for {@link CollisionElasticPdu#pad}
  * @return value of interest */
public short getPad()
{
    return pad; 
}

/** Setter for {@link CollisionElasticPdu#contactVelocity}
  * @param pContactVelocity new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setContactVelocity(Vector3Float pContactVelocity)
{
    contactVelocity = pContactVelocity;
    return this;
}
/** Getter for {@link CollisionElasticPdu#contactVelocity}
  * @return value of interest */
public Vector3Float getContactVelocity()
{
    return contactVelocity;
}


/** Setter for {@link CollisionElasticPdu#mass}
  * @param pMass new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setMass(float pMass)
{
    mass = pMass;
    return this;
}
/** Getter for {@link CollisionElasticPdu#mass}
  * @return value of interest */
public float getMass()
{
    return mass; 
}

/** Setter for {@link CollisionElasticPdu#locationOfImpact}
  * @param pLocationOfImpact new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setLocationOfImpact(Vector3Float pLocationOfImpact)
{
    locationOfImpact = pLocationOfImpact;
    return this;
}
/** Getter for {@link CollisionElasticPdu#locationOfImpact}
  * @return value of interest */
public Vector3Float getLocationOfImpact()
{
    return locationOfImpact;
}


/** Setter for {@link CollisionElasticPdu#collisionIntermediateResultXX}
  * @param pCollisionIntermediateResultXX new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCollisionIntermediateResultXX(float pCollisionIntermediateResultXX)
{
    collisionIntermediateResultXX = pCollisionIntermediateResultXX;
    return this;
}
/** Getter for {@link CollisionElasticPdu#collisionIntermediateResultXX}
  * @return value of interest */
public float getCollisionIntermediateResultXX()
{
    return collisionIntermediateResultXX; 
}

/** Setter for {@link CollisionElasticPdu#collisionIntermediateResultXY}
  * @param pCollisionIntermediateResultXY new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCollisionIntermediateResultXY(float pCollisionIntermediateResultXY)
{
    collisionIntermediateResultXY = pCollisionIntermediateResultXY;
    return this;
}
/** Getter for {@link CollisionElasticPdu#collisionIntermediateResultXY}
  * @return value of interest */
public float getCollisionIntermediateResultXY()
{
    return collisionIntermediateResultXY; 
}

/** Setter for {@link CollisionElasticPdu#collisionIntermediateResultXZ}
  * @param pCollisionIntermediateResultXZ new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCollisionIntermediateResultXZ(float pCollisionIntermediateResultXZ)
{
    collisionIntermediateResultXZ = pCollisionIntermediateResultXZ;
    return this;
}
/** Getter for {@link CollisionElasticPdu#collisionIntermediateResultXZ}
  * @return value of interest */
public float getCollisionIntermediateResultXZ()
{
    return collisionIntermediateResultXZ; 
}

/** Setter for {@link CollisionElasticPdu#collisionIntermediateResultYY}
  * @param pCollisionIntermediateResultYY new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCollisionIntermediateResultYY(float pCollisionIntermediateResultYY)
{
    collisionIntermediateResultYY = pCollisionIntermediateResultYY;
    return this;
}
/** Getter for {@link CollisionElasticPdu#collisionIntermediateResultYY}
  * @return value of interest */
public float getCollisionIntermediateResultYY()
{
    return collisionIntermediateResultYY; 
}

/** Setter for {@link CollisionElasticPdu#collisionIntermediateResultYZ}
  * @param pCollisionIntermediateResultYZ new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCollisionIntermediateResultYZ(float pCollisionIntermediateResultYZ)
{
    collisionIntermediateResultYZ = pCollisionIntermediateResultYZ;
    return this;
}
/** Getter for {@link CollisionElasticPdu#collisionIntermediateResultYZ}
  * @return value of interest */
public float getCollisionIntermediateResultYZ()
{
    return collisionIntermediateResultYZ; 
}

/** Setter for {@link CollisionElasticPdu#collisionIntermediateResultZZ}
  * @param pCollisionIntermediateResultZZ new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCollisionIntermediateResultZZ(float pCollisionIntermediateResultZZ)
{
    collisionIntermediateResultZZ = pCollisionIntermediateResultZZ;
    return this;
}
/** Getter for {@link CollisionElasticPdu#collisionIntermediateResultZZ}
  * @return value of interest */
public float getCollisionIntermediateResultZZ()
{
    return collisionIntermediateResultZZ; 
}

/** Setter for {@link CollisionElasticPdu#unitSurfaceNormal}
  * @param pUnitSurfaceNormal new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setUnitSurfaceNormal(Vector3Float pUnitSurfaceNormal)
{
    unitSurfaceNormal = pUnitSurfaceNormal;
    return this;
}
/** Getter for {@link CollisionElasticPdu#unitSurfaceNormal}
  * @return value of interest */
public Vector3Float getUnitSurfaceNormal()
{
    return unitSurfaceNormal;
}


/** Setter for {@link CollisionElasticPdu#coefficientOfRestitution}
  * @param pCoefficientOfRestitution new value of interest
  * @return same object to permit progressive setters */
public CollisionElasticPdu setCoefficientOfRestitution(float pCoefficientOfRestitution)
{
    coefficientOfRestitution = pCoefficientOfRestitution;
    return this;
}
/** Getter for {@link CollisionElasticPdu#coefficientOfRestitution}
  * @return value of interest */
public float getCoefficientOfRestitution()
{
    return coefficientOfRestitution; 
}

/**
 * Serializes an object to a DataOutputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataOutputStream
 * @param dos the OutputStream
 */
public void marshal(DataOutputStream dos) throws Exception
{
    super.marshal(dos);
    try 
    {
       issuingEntityID.marshal(dos);
       collidingEntityID.marshal(dos);
       collisionEventID.marshal(dos);
       dos.writeShort(pad);
       contactVelocity.marshal(dos);
       dos.writeFloat(mass);
       locationOfImpact.marshal(dos);
       dos.writeFloat(collisionIntermediateResultXX);
       dos.writeFloat(collisionIntermediateResultXY);
       dos.writeFloat(collisionIntermediateResultXZ);
       dos.writeFloat(collisionIntermediateResultYY);
       dos.writeFloat(collisionIntermediateResultYZ);
       dos.writeFloat(collisionIntermediateResultZZ);
       unitSurfaceNormal.marshal(dos);
       dos.writeFloat(coefficientOfRestitution);
    }
    catch(Exception e)
    {
      System.err.println(e);
    }
}

/**
 * Deserializes an object from a DataInputStream.
 * @throws java.lang.Exception if something goes wrong
 * @see java.io.DataInputStream
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param dis the InputStream
 * @return marshalled serialized size in bytes
 */
public int unmarshal(DataInputStream dis) throws Exception
{
    int uPosition = 0;
    uPosition += super.unmarshal(dis);

    try 
    {
        uPosition += issuingEntityID.unmarshal(dis);
        uPosition += collidingEntityID.unmarshal(dis);
        uPosition += collisionEventID.unmarshal(dis);
        pad = (short)dis.readUnsignedShort();
        uPosition += 2;
        uPosition += contactVelocity.unmarshal(dis);
        mass = dis.readFloat();
        uPosition += 4;
        uPosition += locationOfImpact.unmarshal(dis);
        collisionIntermediateResultXX = dis.readFloat();
        uPosition += 4;
        collisionIntermediateResultXY = dis.readFloat();
        uPosition += 4;
        collisionIntermediateResultXZ = dis.readFloat();
        uPosition += 4;
        collisionIntermediateResultYY = dis.readFloat();
        uPosition += 4;
        collisionIntermediateResultYZ = dis.readFloat();
        uPosition += 4;
        collisionIntermediateResultZZ = dis.readFloat();
        uPosition += 4;
        uPosition += unitSurfaceNormal.unmarshal(dis);
        coefficientOfRestitution = dis.readFloat();
        uPosition += 4;
    }
    catch(Exception e)
    { 
      System.err.println(e); 
    }
    return getMarshalledSize();
}

/**
 * Packs an object into the ByteBuffer.
 * @throws java.nio.BufferOverflowException if byteBuffer is too small
 * @throws java.nio.ReadOnlyBufferException if byteBuffer is read only
 * @see java.nio.ByteBuffer
 * @param byteBuffer The ByteBuffer at the position to begin writing
 * @throws Exception ByteBuffer-generated exception
 */
public void marshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
   super.marshal(byteBuffer);
   issuingEntityID.marshal(byteBuffer);
   collidingEntityID.marshal(byteBuffer);
   collisionEventID.marshal(byteBuffer);
   byteBuffer.putShort( (short)pad);
   contactVelocity.marshal(byteBuffer);
   byteBuffer.putFloat( (float)mass);
   locationOfImpact.marshal(byteBuffer);
   byteBuffer.putFloat( (float)collisionIntermediateResultXX);
   byteBuffer.putFloat( (float)collisionIntermediateResultXY);
   byteBuffer.putFloat( (float)collisionIntermediateResultXZ);
   byteBuffer.putFloat( (float)collisionIntermediateResultYY);
   byteBuffer.putFloat( (float)collisionIntermediateResultYZ);
   byteBuffer.putFloat( (float)collisionIntermediateResultZZ);
   unitSurfaceNormal.marshal(byteBuffer);
   byteBuffer.putFloat( (float)coefficientOfRestitution);
}

/**
 * Unpacks a Pdu from the underlying data.
 * @throws java.nio.BufferUnderflowException if byteBuffer is too small
 * @see java.nio.ByteBuffer
 * @see <a href="https://en.wikipedia.org/wiki/Marshalling_(computer_science)" target="_blank">https://en.wikipedia.org/wiki/Marshalling_(computer_science)</a>
 * @param byteBuffer The ByteBuffer at the position to begin reading
 * @return marshalled serialized size in bytes
 * @throws Exception ByteBuffer-generated exception
 */
public int unmarshal(java.nio.ByteBuffer byteBuffer) throws Exception
{
    super.unmarshal(byteBuffer);

    try
    {
        // attribute issuingEntityID marked as not serialized
        issuingEntityID.unmarshal(byteBuffer);
        // attribute collidingEntityID marked as not serialized
        collidingEntityID.unmarshal(byteBuffer);
        // attribute collisionEventID marked as not serialized
        collisionEventID.unmarshal(byteBuffer);
        // attribute pad marked as not serialized
        pad = (short)(byteBuffer.getShort() & 0xFFFF);
        // attribute contactVelocity marked as not serialized
        contactVelocity.unmarshal(byteBuffer);
        // attribute mass marked as not serialized
        mass = byteBuffer.getFloat();
        // attribute locationOfImpact marked as not serialized
        locationOfImpact.unmarshal(byteBuffer);
        // attribute collisionIntermediateResultXX marked as not serialized
        collisionIntermediateResultXX = byteBuffer.getFloat();
        // attribute collisionIntermediateResultXY marked as not serialized
        collisionIntermediateResultXY = byteBuffer.getFloat();
        // attribute collisionIntermediateResultXZ marked as not serialized
        collisionIntermediateResultXZ = byteBuffer.getFloat();
        // attribute collisionIntermediateResultYY marked as not serialized
        collisionIntermediateResultYY = byteBuffer.getFloat();
        // attribute collisionIntermediateResultYZ marked as not serialized
        collisionIntermediateResultYZ = byteBuffer.getFloat();
        // attribute collisionIntermediateResultZZ marked as not serialized
        collisionIntermediateResultZZ = byteBuffer.getFloat();
        // attribute unitSurfaceNormal marked as not serialized
        unitSurfaceNormal.unmarshal(byteBuffer);
        // attribute coefficientOfRestitution marked as not serialized
        coefficientOfRestitution = byteBuffer.getFloat();
    }
    catch (java.nio.BufferUnderflowException bue)
    {
        System.err.println("*** buffer underflow error while unmarshalling " + this.getClass().getName());
    }
    return getMarshalledSize();
}

 /*
  * Override of default equals method.  Calls equalsImpl() for content comparison.
  */
@Override
 public boolean equals(Object obj)
 {
    if(this == obj)
      return true;

    if(obj == null)
       return false;

    if(!getClass().isAssignableFrom(obj.getClass())) //if(getClass() != obj.getClass())
        return false;

    return equalsImpl(obj);
 }

@Override
 public boolean equalsImpl(Object obj)
 {
     final CollisionElasticPdu rhs = (CollisionElasticPdu)obj;

     if( ! Objects.equals(issuingEntityID, rhs.issuingEntityID) ) return false;
     if( ! Objects.equals(collidingEntityID, rhs.collidingEntityID) ) return false;
     if( ! Objects.equals(collisionEventID, rhs.collisionEventID) ) return false;
     if( ! (pad == rhs.pad)) return false;
     if( ! Objects.equals(contactVelocity, rhs.contactVelocity) ) return false;
     if( ! (mass == rhs.mass)) return false;
     if( ! Objects.equals(locationOfImpact, rhs.locationOfImpact) ) return false;
     if( ! (collisionIntermediateResultXX == rhs.collisionIntermediateResultXX)) return false;
     if( ! (collisionIntermediateResultXY == rhs.collisionIntermediateResultXY)) return false;
     if( ! (collisionIntermediateResultXZ == rhs.collisionIntermediateResultXZ)) return false;
     if( ! (collisionIntermediateResultYY == rhs.collisionIntermediateResultYY)) return false;
     if( ! (collisionIntermediateResultYZ == rhs.collisionIntermediateResultYZ)) return false;
     if( ! (collisionIntermediateResultZZ == rhs.collisionIntermediateResultZZ)) return false;
     if( ! Objects.equals(unitSurfaceNormal, rhs.unitSurfaceNormal) ) return false;
     if( ! (coefficientOfRestitution == rhs.coefficientOfRestitution)) return false;
    return super.equalsImpl(rhs);
 }

 @Override
 public String toString()
 {
    StringBuilder sb  = new StringBuilder();
    StringBuilder sb2 = new StringBuilder();
    sb.append(getClass().getSimpleName());
    sb.append(" issuingEntityID:").append(issuingEntityID); // writeOneToString
    sb.append(" collidingEntityID:").append(collidingEntityID); // writeOneToString
    sb.append(" collisionEventID:").append(collisionEventID); // writeOneToString
    sb.append(" pad:").append(pad); // writeOneToString
    sb.append(" contactVelocity:").append(contactVelocity); // writeOneToString
    sb.append(" mass:").append(mass); // writeOneToString
    sb.append(" locationOfImpact:").append(locationOfImpact); // writeOneToString
    sb.append(" collisionIntermediateResultXX:").append(collisionIntermediateResultXX); // writeOneToString
    sb.append(" collisionIntermediateResultXY:").append(collisionIntermediateResultXY); // writeOneToString
    sb.append(" collisionIntermediateResultXZ:").append(collisionIntermediateResultXZ); // writeOneToString
    sb.append(" collisionIntermediateResultYY:").append(collisionIntermediateResultYY); // writeOneToString
    sb.append(" collisionIntermediateResultYZ:").append(collisionIntermediateResultYZ); // writeOneToString
    sb.append(" collisionIntermediateResultZZ:").append(collisionIntermediateResultZZ); // writeOneToString
    sb.append(" unitSurfaceNormal:").append(unitSurfaceNormal); // writeOneToString
    sb.append(" coefficientOfRestitution:").append(coefficientOfRestitution); // writeOneToString

   return sb.toString();
 }

 @Override
 public int hashCode()
 {
	 return Objects.hash(this.issuingEntityID,
	                     this.collidingEntityID,
	                     this.collisionEventID,
	                     this.pad,
	                     this.contactVelocity,
	                     this.mass,
	                     this.locationOfImpact,
	                     this.collisionIntermediateResultXX,
	                     this.collisionIntermediateResultXY,
	                     this.collisionIntermediateResultXZ,
	                     this.collisionIntermediateResultYY,
	                     this.collisionIntermediateResultYZ,
	                     this.collisionIntermediateResultZZ,
	                     this.unitSurfaceNormal,
	                     this.coefficientOfRestitution);
 }
} // end of class
